
Nhung_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e60  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08002f70  08002f70  00003f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032e0  080032e0  00005054  2**0
                  CONTENTS
  4 .ARM          00000000  080032e0  080032e0  00005054  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032e0  080032e0  00005054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032e0  080032e0  000042e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032e4  080032e4  000042e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080032e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000054  0800333c  00005054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  0800333c  000051fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001dc7  00000000  00000000  0000507d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000076a  00000000  00000000  00006e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002f0  00000000  00000000  000075b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000226  00000000  00000000  000078a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001614e  00000000  00000000  00007ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003152  00000000  00000000  0001dc14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f693  00000000  00000000  00020d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a03f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001294  00000000  00000000  000a043c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000a16d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000054 	.word	0x20000054
 800012c:	00000000 	.word	0x00000000
 8000130:	08002f58 	.word	0x08002f58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000058 	.word	0x20000058
 800014c:	08002f58 	.word	0x08002f58

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_fmul>:
 8000aec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000af0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000af4:	bf1e      	ittt	ne
 8000af6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000afa:	ea92 0f0c 	teqne	r2, ip
 8000afe:	ea93 0f0c 	teqne	r3, ip
 8000b02:	d06f      	beq.n	8000be4 <__aeabi_fmul+0xf8>
 8000b04:	441a      	add	r2, r3
 8000b06:	ea80 0c01 	eor.w	ip, r0, r1
 8000b0a:	0240      	lsls	r0, r0, #9
 8000b0c:	bf18      	it	ne
 8000b0e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b12:	d01e      	beq.n	8000b52 <__aeabi_fmul+0x66>
 8000b14:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b18:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b1c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b20:	fba0 3101 	umull	r3, r1, r0, r1
 8000b24:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b28:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000b2c:	bf3e      	ittt	cc
 8000b2e:	0049      	lslcc	r1, r1, #1
 8000b30:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b34:	005b      	lslcc	r3, r3, #1
 8000b36:	ea40 0001 	orr.w	r0, r0, r1
 8000b3a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000b3e:	2afd      	cmp	r2, #253	@ 0xfd
 8000b40:	d81d      	bhi.n	8000b7e <__aeabi_fmul+0x92>
 8000b42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000b46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b4a:	bf08      	it	eq
 8000b4c:	f020 0001 	biceq.w	r0, r0, #1
 8000b50:	4770      	bx	lr
 8000b52:	f090 0f00 	teq	r0, #0
 8000b56:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	0249      	lsleq	r1, r1, #9
 8000b5e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b62:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b66:	3a7f      	subs	r2, #127	@ 0x7f
 8000b68:	bfc2      	ittt	gt
 8000b6a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b6e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b72:	4770      	bxgt	lr
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	f04f 0300 	mov.w	r3, #0
 8000b7c:	3a01      	subs	r2, #1
 8000b7e:	dc5d      	bgt.n	8000c3c <__aeabi_fmul+0x150>
 8000b80:	f112 0f19 	cmn.w	r2, #25
 8000b84:	bfdc      	itt	le
 8000b86:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000b8a:	4770      	bxle	lr
 8000b8c:	f1c2 0200 	rsb	r2, r2, #0
 8000b90:	0041      	lsls	r1, r0, #1
 8000b92:	fa21 f102 	lsr.w	r1, r1, r2
 8000b96:	f1c2 0220 	rsb	r2, r2, #32
 8000b9a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b9e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ba2:	f140 0000 	adc.w	r0, r0, #0
 8000ba6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000baa:	bf08      	it	eq
 8000bac:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb0:	4770      	bx	lr
 8000bb2:	f092 0f00 	teq	r2, #0
 8000bb6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bba:	bf02      	ittt	eq
 8000bbc:	0040      	lsleq	r0, r0, #1
 8000bbe:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bc2:	3a01      	subeq	r2, #1
 8000bc4:	d0f9      	beq.n	8000bba <__aeabi_fmul+0xce>
 8000bc6:	ea40 000c 	orr.w	r0, r0, ip
 8000bca:	f093 0f00 	teq	r3, #0
 8000bce:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd2:	bf02      	ittt	eq
 8000bd4:	0049      	lsleq	r1, r1, #1
 8000bd6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000bda:	3b01      	subeq	r3, #1
 8000bdc:	d0f9      	beq.n	8000bd2 <__aeabi_fmul+0xe6>
 8000bde:	ea41 010c 	orr.w	r1, r1, ip
 8000be2:	e78f      	b.n	8000b04 <__aeabi_fmul+0x18>
 8000be4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000be8:	ea92 0f0c 	teq	r2, ip
 8000bec:	bf18      	it	ne
 8000bee:	ea93 0f0c 	teqne	r3, ip
 8000bf2:	d00a      	beq.n	8000c0a <__aeabi_fmul+0x11e>
 8000bf4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000bf8:	bf18      	it	ne
 8000bfa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000bfe:	d1d8      	bne.n	8000bb2 <__aeabi_fmul+0xc6>
 8000c00:	ea80 0001 	eor.w	r0, r0, r1
 8000c04:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	bf17      	itett	ne
 8000c10:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c14:	4608      	moveq	r0, r1
 8000c16:	f091 0f00 	teqne	r1, #0
 8000c1a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c1e:	d014      	beq.n	8000c4a <__aeabi_fmul+0x15e>
 8000c20:	ea92 0f0c 	teq	r2, ip
 8000c24:	d101      	bne.n	8000c2a <__aeabi_fmul+0x13e>
 8000c26:	0242      	lsls	r2, r0, #9
 8000c28:	d10f      	bne.n	8000c4a <__aeabi_fmul+0x15e>
 8000c2a:	ea93 0f0c 	teq	r3, ip
 8000c2e:	d103      	bne.n	8000c38 <__aeabi_fmul+0x14c>
 8000c30:	024b      	lsls	r3, r1, #9
 8000c32:	bf18      	it	ne
 8000c34:	4608      	movne	r0, r1
 8000c36:	d108      	bne.n	8000c4a <__aeabi_fmul+0x15e>
 8000c38:	ea80 0001 	eor.w	r0, r0, r1
 8000c3c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c4e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000c52:	4770      	bx	lr

08000c54 <__aeabi_fdiv>:
 8000c54:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c62:	ea92 0f0c 	teqne	r2, ip
 8000c66:	ea93 0f0c 	teqne	r3, ip
 8000c6a:	d069      	beq.n	8000d40 <__aeabi_fdiv+0xec>
 8000c6c:	eba2 0203 	sub.w	r2, r2, r3
 8000c70:	ea80 0c01 	eor.w	ip, r0, r1
 8000c74:	0249      	lsls	r1, r1, #9
 8000c76:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c7a:	d037      	beq.n	8000cec <__aeabi_fdiv+0x98>
 8000c7c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c80:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c84:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c88:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	bf38      	it	cc
 8000c90:	005b      	lslcc	r3, r3, #1
 8000c92:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000c96:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	bf24      	itt	cs
 8000c9e:	1a5b      	subcs	r3, r3, r1
 8000ca0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ca4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ca8:	bf24      	itt	cs
 8000caa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cae:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cb2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000cb6:	bf24      	itt	cs
 8000cb8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cbc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cc0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000cc4:	bf24      	itt	cs
 8000cc6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000cca:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	bf18      	it	ne
 8000cd2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000cd6:	d1e0      	bne.n	8000c9a <__aeabi_fdiv+0x46>
 8000cd8:	2afd      	cmp	r2, #253	@ 0xfd
 8000cda:	f63f af50 	bhi.w	8000b7e <__aeabi_fmul+0x92>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce4:	bf08      	it	eq
 8000ce6:	f020 0001 	biceq.w	r0, r0, #1
 8000cea:	4770      	bx	lr
 8000cec:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000cf0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cf4:	327f      	adds	r2, #127	@ 0x7f
 8000cf6:	bfc2      	ittt	gt
 8000cf8:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000cfc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d00:	4770      	bxgt	lr
 8000d02:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d06:	f04f 0300 	mov.w	r3, #0
 8000d0a:	3a01      	subs	r2, #1
 8000d0c:	e737      	b.n	8000b7e <__aeabi_fmul+0x92>
 8000d0e:	f092 0f00 	teq	r2, #0
 8000d12:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d16:	bf02      	ittt	eq
 8000d18:	0040      	lsleq	r0, r0, #1
 8000d1a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d1e:	3a01      	subeq	r2, #1
 8000d20:	d0f9      	beq.n	8000d16 <__aeabi_fdiv+0xc2>
 8000d22:	ea40 000c 	orr.w	r0, r0, ip
 8000d26:	f093 0f00 	teq	r3, #0
 8000d2a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d2e:	bf02      	ittt	eq
 8000d30:	0049      	lsleq	r1, r1, #1
 8000d32:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d36:	3b01      	subeq	r3, #1
 8000d38:	d0f9      	beq.n	8000d2e <__aeabi_fdiv+0xda>
 8000d3a:	ea41 010c 	orr.w	r1, r1, ip
 8000d3e:	e795      	b.n	8000c6c <__aeabi_fdiv+0x18>
 8000d40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d44:	ea92 0f0c 	teq	r2, ip
 8000d48:	d108      	bne.n	8000d5c <__aeabi_fdiv+0x108>
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	f47f af7d 	bne.w	8000c4a <__aeabi_fmul+0x15e>
 8000d50:	ea93 0f0c 	teq	r3, ip
 8000d54:	f47f af70 	bne.w	8000c38 <__aeabi_fmul+0x14c>
 8000d58:	4608      	mov	r0, r1
 8000d5a:	e776      	b.n	8000c4a <__aeabi_fmul+0x15e>
 8000d5c:	ea93 0f0c 	teq	r3, ip
 8000d60:	d104      	bne.n	8000d6c <__aeabi_fdiv+0x118>
 8000d62:	024b      	lsls	r3, r1, #9
 8000d64:	f43f af4c 	beq.w	8000c00 <__aeabi_fmul+0x114>
 8000d68:	4608      	mov	r0, r1
 8000d6a:	e76e      	b.n	8000c4a <__aeabi_fmul+0x15e>
 8000d6c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d70:	bf18      	it	ne
 8000d72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d76:	d1ca      	bne.n	8000d0e <__aeabi_fdiv+0xba>
 8000d78:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000d7c:	f47f af5c 	bne.w	8000c38 <__aeabi_fmul+0x14c>
 8000d80:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000d84:	f47f af3c 	bne.w	8000c00 <__aeabi_fmul+0x114>
 8000d88:	e75f      	b.n	8000c4a <__aeabi_fmul+0x15e>
 8000d8a:	bf00      	nop

08000d8c <__gesf2>:
 8000d8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000d90:	e006      	b.n	8000da0 <__cmpsf2+0x4>
 8000d92:	bf00      	nop

08000d94 <__lesf2>:
 8000d94:	f04f 0c01 	mov.w	ip, #1
 8000d98:	e002      	b.n	8000da0 <__cmpsf2+0x4>
 8000d9a:	bf00      	nop

08000d9c <__cmpsf2>:
 8000d9c:	f04f 0c01 	mov.w	ip, #1
 8000da0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000da4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000da8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db0:	bf18      	it	ne
 8000db2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000db6:	d011      	beq.n	8000ddc <__cmpsf2+0x40>
 8000db8:	b001      	add	sp, #4
 8000dba:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dbe:	bf18      	it	ne
 8000dc0:	ea90 0f01 	teqne	r0, r1
 8000dc4:	bf58      	it	pl
 8000dc6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dca:	bf88      	it	hi
 8000dcc:	17c8      	asrhi	r0, r1, #31
 8000dce:	bf38      	it	cc
 8000dd0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000dd4:	bf18      	it	ne
 8000dd6:	f040 0001 	orrne.w	r0, r0, #1
 8000dda:	4770      	bx	lr
 8000ddc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000de0:	d102      	bne.n	8000de8 <__cmpsf2+0x4c>
 8000de2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000de6:	d105      	bne.n	8000df4 <__cmpsf2+0x58>
 8000de8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000dec:	d1e4      	bne.n	8000db8 <__cmpsf2+0x1c>
 8000dee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000df2:	d0e1      	beq.n	8000db8 <__cmpsf2+0x1c>
 8000df4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <__aeabi_cfrcmple>:
 8000dfc:	4684      	mov	ip, r0
 8000dfe:	4608      	mov	r0, r1
 8000e00:	4661      	mov	r1, ip
 8000e02:	e7ff      	b.n	8000e04 <__aeabi_cfcmpeq>

08000e04 <__aeabi_cfcmpeq>:
 8000e04:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e06:	f7ff ffc9 	bl	8000d9c <__cmpsf2>
 8000e0a:	2800      	cmp	r0, #0
 8000e0c:	bf48      	it	mi
 8000e0e:	f110 0f00 	cmnmi.w	r0, #0
 8000e12:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e14 <__aeabi_fcmpeq>:
 8000e14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e18:	f7ff fff4 	bl	8000e04 <__aeabi_cfcmpeq>
 8000e1c:	bf0c      	ite	eq
 8000e1e:	2001      	moveq	r0, #1
 8000e20:	2000      	movne	r0, #0
 8000e22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e26:	bf00      	nop

08000e28 <__aeabi_fcmplt>:
 8000e28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e2c:	f7ff ffea 	bl	8000e04 <__aeabi_cfcmpeq>
 8000e30:	bf34      	ite	cc
 8000e32:	2001      	movcc	r0, #1
 8000e34:	2000      	movcs	r0, #0
 8000e36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e3a:	bf00      	nop

08000e3c <__aeabi_fcmple>:
 8000e3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e40:	f7ff ffe0 	bl	8000e04 <__aeabi_cfcmpeq>
 8000e44:	bf94      	ite	ls
 8000e46:	2001      	movls	r0, #1
 8000e48:	2000      	movhi	r0, #0
 8000e4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e4e:	bf00      	nop

08000e50 <__aeabi_fcmpge>:
 8000e50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e54:	f7ff ffd2 	bl	8000dfc <__aeabi_cfrcmple>
 8000e58:	bf94      	ite	ls
 8000e5a:	2001      	movls	r0, #1
 8000e5c:	2000      	movhi	r0, #0
 8000e5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e62:	bf00      	nop

08000e64 <__aeabi_fcmpgt>:
 8000e64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e68:	f7ff ffc8 	bl	8000dfc <__aeabi_cfrcmple>
 8000e6c:	bf34      	ite	cc
 8000e6e:	2001      	movcc	r0, #1
 8000e70:	2000      	movcs	r0, #0
 8000e72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e76:	bf00      	nop

08000e78 <ADC_to_PPM_Fixed>:

    return ex;
}

// ==== PPM calculation được hiệu chỉnh cho dải thấp ====
int ADC_to_PPM_Fixed(uint16_t adc_value) {
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
    // Kiểm tra giá trị ADC hợp lệ
    if (adc_value == 0 || adc_value >= 5000) {
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d004      	beq.n	8000e92 <ADC_to_PPM_Fixed+0x1a>
 8000e88:	88fb      	ldrh	r3, [r7, #6]
 8000e8a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d902      	bls.n	8000e98 <ADC_to_PPM_Fixed+0x20>
        return 700; // Giá trị không hợp lệ
 8000e92:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8000e96:	e13d      	b.n	8001114 <ADC_to_PPM_Fixed+0x29c>
    }

    // Bước 1: ADC → Voltage
    float voltage_out = (adc_value * VCC_VOLTAGE) / ADC_RESOLUTION;
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff faaa 	bl	80003f4 <__aeabi_i2d>
 8000ea0:	a39f      	add	r3, pc, #636	@ (adr r3, 8001120 <ADC_to_PPM_Fixed+0x2a8>)
 8000ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea6:	f7ff fb0f 	bl	80004c8 <__aeabi_dmul>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	a39d      	add	r3, pc, #628	@ (adr r3, 8001128 <ADC_to_PPM_Fixed+0x2b0>)
 8000eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb8:	f7ff fc30 	bl	800071c <__aeabi_ddiv>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f7ff fdc2 	bl	8000a4c <__aeabi_d2f>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	617b      	str	r3, [r7, #20]

    float Rs = MODULE_RL_VALUE * (VCC_VOLTAGE - voltage_out) / voltage_out;
 8000ecc:	6978      	ldr	r0, [r7, #20]
 8000ece:	f7ff faa3 	bl	8000418 <__aeabi_f2d>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	a192      	add	r1, pc, #584	@ (adr r1, 8001120 <ADC_to_PPM_Fixed+0x2a8>)
 8000ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000edc:	f7ff f93c 	bl	8000158 <__aeabi_dsub>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	a391      	add	r3, pc, #580	@ (adr r3, 8001130 <ADC_to_PPM_Fixed+0x2b8>)
 8000eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eee:	f7ff faeb 	bl	80004c8 <__aeabi_dmul>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4614      	mov	r4, r2
 8000ef8:	461d      	mov	r5, r3
 8000efa:	6978      	ldr	r0, [r7, #20]
 8000efc:	f7ff fa8c 	bl	8000418 <__aeabi_f2d>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4620      	mov	r0, r4
 8000f06:	4629      	mov	r1, r5
 8000f08:	f7ff fc08 	bl	800071c <__aeabi_ddiv>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	4610      	mov	r0, r2
 8000f12:	4619      	mov	r1, r3
 8000f14:	f7ff fd9a 	bl	8000a4c <__aeabi_d2f>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	613b      	str	r3, [r7, #16]

    // Bước 4: Tính tỷ lệ Rs/R0
    float rs_r0_ratio = Rs / R0_CLEAN_AIR;
 8000f1c:	4988      	ldr	r1, [pc, #544]	@ (8001140 <ADC_to_PPM_Fixed+0x2c8>)
 8000f1e:	6938      	ldr	r0, [r7, #16]
 8000f20:	f7ff fe98 	bl	8000c54 <__aeabi_fdiv>
 8000f24:	4603      	mov	r3, r0
 8000f26:	60fb      	str	r3, [r7, #12]

    if (rs_r0_ratio >= 10.0) {
 8000f28:	4986      	ldr	r1, [pc, #536]	@ (8001144 <ADC_to_PPM_Fixed+0x2cc>)
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f7ff ff90 	bl	8000e50 <__aeabi_fcmpge>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d01a      	beq.n	8000f6c <ADC_to_PPM_Fixed+0xf4>
        return 10 + (int)((20.0 - rs_r0_ratio) * 2.0); // 10-30 ppm
 8000f36:	68f8      	ldr	r0, [r7, #12]
 8000f38:	f7ff fa6e 	bl	8000418 <__aeabi_f2d>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	f04f 0000 	mov.w	r0, #0
 8000f44:	4980      	ldr	r1, [pc, #512]	@ (8001148 <ADC_to_PPM_Fixed+0x2d0>)
 8000f46:	f7ff f907 	bl	8000158 <__aeabi_dsub>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	f7ff f901 	bl	800015c <__adddf3>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4619      	mov	r1, r3
 8000f62:	f7ff fd4b 	bl	80009fc <__aeabi_d2iz>
 8000f66:	4603      	mov	r3, r0
 8000f68:	330a      	adds	r3, #10
 8000f6a:	e0d3      	b.n	8001114 <ADC_to_PPM_Fixed+0x29c>
    } else if (rs_r0_ratio >= 5.0) {
 8000f6c:	4977      	ldr	r1, [pc, #476]	@ (800114c <ADC_to_PPM_Fixed+0x2d4>)
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f7ff ff6e 	bl	8000e50 <__aeabi_fcmpge>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d01b      	beq.n	8000fb2 <ADC_to_PPM_Fixed+0x13a>
        return 30 + (int)((10.0 - rs_r0_ratio) * 8.0); // 30-70 ppm
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f7ff fa4c 	bl	8000418 <__aeabi_f2d>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	f04f 0000 	mov.w	r0, #0
 8000f88:	4971      	ldr	r1, [pc, #452]	@ (8001150 <ADC_to_PPM_Fixed+0x2d8>)
 8000f8a:	f7ff f8e5 	bl	8000158 <__aeabi_dsub>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	4b6e      	ldr	r3, [pc, #440]	@ (8001154 <ADC_to_PPM_Fixed+0x2dc>)
 8000f9c:	f7ff fa94 	bl	80004c8 <__aeabi_dmul>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f7ff fd28 	bl	80009fc <__aeabi_d2iz>
 8000fac:	4603      	mov	r3, r0
 8000fae:	331e      	adds	r3, #30
 8000fb0:	e0b0      	b.n	8001114 <ADC_to_PPM_Fixed+0x29c>
    } else if (rs_r0_ratio >= 2.0) {
 8000fb2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f7ff ff4a 	bl	8000e50 <__aeabi_fcmpge>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d01b      	beq.n	8000ffa <ADC_to_PPM_Fixed+0x182>
        return 70 + (int)((5.0 - rs_r0_ratio) * 25.0); // 70-145 ppm
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f7ff fa28 	bl	8000418 <__aeabi_f2d>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	f04f 0000 	mov.w	r0, #0
 8000fd0:	4961      	ldr	r1, [pc, #388]	@ (8001158 <ADC_to_PPM_Fixed+0x2e0>)
 8000fd2:	f7ff f8c1 	bl	8000158 <__aeabi_dsub>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	4b5e      	ldr	r3, [pc, #376]	@ (800115c <ADC_to_PPM_Fixed+0x2e4>)
 8000fe4:	f7ff fa70 	bl	80004c8 <__aeabi_dmul>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f7ff fd04 	bl	80009fc <__aeabi_d2iz>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	3346      	adds	r3, #70	@ 0x46
 8000ff8:	e08c      	b.n	8001114 <ADC_to_PPM_Fixed+0x29c>
    } else if (rs_r0_ratio >= 1.0) {
 8000ffa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f7ff ff26 	bl	8000e50 <__aeabi_fcmpge>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d01c      	beq.n	8001044 <ADC_to_PPM_Fixed+0x1cc>
        return 145 + (int)((2.0 - rs_r0_ratio) * 55.0); // 145-200 ppm
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f7ff fa04 	bl	8000418 <__aeabi_f2d>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	f04f 0000 	mov.w	r0, #0
 8001018:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800101c:	f7ff f89c 	bl	8000158 <__aeabi_dsub>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	4b4c      	ldr	r3, [pc, #304]	@ (8001160 <ADC_to_PPM_Fixed+0x2e8>)
 800102e:	f7ff fa4b 	bl	80004c8 <__aeabi_dmul>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f7ff fcdf 	bl	80009fc <__aeabi_d2iz>
 800103e:	4603      	mov	r3, r0
 8001040:	3391      	adds	r3, #145	@ 0x91
 8001042:	e067      	b.n	8001114 <ADC_to_PPM_Fixed+0x29c>
    } else if (rs_r0_ratio >= 0.5) {
 8001044:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f7ff ff01 	bl	8000e50 <__aeabi_fcmpge>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d01b      	beq.n	800108c <ADC_to_PPM_Fixed+0x214>
        return 200 + (int)((1.0 - rs_r0_ratio) * 200.0); // 200-300 ppm
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f7ff f9df 	bl	8000418 <__aeabi_f2d>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	f04f 0000 	mov.w	r0, #0
 8001062:	4940      	ldr	r1, [pc, #256]	@ (8001164 <ADC_to_PPM_Fixed+0x2ec>)
 8001064:	f7ff f878 	bl	8000158 <__aeabi_dsub>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	4b3c      	ldr	r3, [pc, #240]	@ (8001168 <ADC_to_PPM_Fixed+0x2f0>)
 8001076:	f7ff fa27 	bl	80004c8 <__aeabi_dmul>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fcbb 	bl	80009fc <__aeabi_d2iz>
 8001086:	4603      	mov	r3, r0
 8001088:	33c8      	adds	r3, #200	@ 0xc8
 800108a:	e043      	b.n	8001114 <ADC_to_PPM_Fixed+0x29c>
    } else if (rs_r0_ratio >= 0.3) {
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f7ff f9c3 	bl	8000418 <__aeabi_f2d>
 8001092:	a329      	add	r3, pc, #164	@ (adr r3, 8001138 <ADC_to_PPM_Fixed+0x2c0>)
 8001094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001098:	f7ff fc9c 	bl	80009d4 <__aeabi_dcmpge>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d01c      	beq.n	80010dc <ADC_to_PPM_Fixed+0x264>
        return 300 + (int)((0.5 - rs_r0_ratio) * 500.0); // 300-400 ppm
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f7ff f9b8 	bl	8000418 <__aeabi_f2d>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	f04f 0000 	mov.w	r0, #0
 80010b0:	492e      	ldr	r1, [pc, #184]	@ (800116c <ADC_to_PPM_Fixed+0x2f4>)
 80010b2:	f7ff f851 	bl	8000158 <__aeabi_dsub>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001170 <ADC_to_PPM_Fixed+0x2f8>)
 80010c4:	f7ff fa00 	bl	80004c8 <__aeabi_dmul>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	f7ff fc94 	bl	80009fc <__aeabi_d2iz>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80010da:	e01b      	b.n	8001114 <ADC_to_PPM_Fixed+0x29c>
    } else {
        return 400 + (int)((0.3 - rs_r0_ratio) * 1000.0); // 400-700 ppm
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f7ff f99b 	bl	8000418 <__aeabi_f2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	a114      	add	r1, pc, #80	@ (adr r1, 8001138 <ADC_to_PPM_Fixed+0x2c0>)
 80010e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010ec:	f7ff f834 	bl	8000158 <__aeabi_dsub>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <ADC_to_PPM_Fixed+0x2fc>)
 80010fe:	f7ff f9e3 	bl	80004c8 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fc77 	bl	80009fc <__aeabi_d2iz>
 800110e:	4603      	mov	r3, r0
 8001110:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
    }
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bdb0      	pop	{r4, r5, r7, pc}
 800111c:	f3af 8000 	nop.w
 8001120:	66666666 	.word	0x66666666
 8001124:	400a6666 	.word	0x400a6666
 8001128:	00000000 	.word	0x00000000
 800112c:	40affe00 	.word	0x40affe00
 8001130:	00000000 	.word	0x00000000
 8001134:	40c38800 	.word	0x40c38800
 8001138:	33333333 	.word	0x33333333
 800113c:	3fd33333 	.word	0x3fd33333
 8001140:	46147000 	.word	0x46147000
 8001144:	41200000 	.word	0x41200000
 8001148:	40340000 	.word	0x40340000
 800114c:	40a00000 	.word	0x40a00000
 8001150:	40240000 	.word	0x40240000
 8001154:	40200000 	.word	0x40200000
 8001158:	40140000 	.word	0x40140000
 800115c:	40390000 	.word	0x40390000
 8001160:	404b8000 	.word	0x404b8000
 8001164:	3ff00000 	.word	0x3ff00000
 8001168:	40690000 	.word	0x40690000
 800116c:	3fe00000 	.word	0x3fe00000
 8001170:	407f4000 	.word	0x407f4000
 8001174:	408f4000 	.word	0x408f4000

08001178 <Get_PPM_Level>:

uint8_t Get_PPM_Level(int ppm) {
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
    if (ppm < PPM_SAFE_THRESHOLD) return 0;        // SAFE - LED xanh dương (< 50 ppm)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b31      	cmp	r3, #49	@ 0x31
 8001184:	dc01      	bgt.n	800118a <Get_PPM_Level+0x12>
 8001186:	2300      	movs	r3, #0
 8001188:	e00b      	b.n	80011a2 <Get_PPM_Level+0x2a>
    if (ppm < PPM_WARNING_THRESHOLD) return 1;     // WARNING - LED vàng (50-200 ppm)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2bc7      	cmp	r3, #199	@ 0xc7
 800118e:	dc01      	bgt.n	8001194 <Get_PPM_Level+0x1c>
 8001190:	2301      	movs	r3, #1
 8001192:	e006      	b.n	80011a2 <Get_PPM_Level+0x2a>
    if (ppm < PPM_DANGER_THRESHOLD) return 2;      // DANGER - LED đỏ nháy 1Hz (200-300 ppm)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800119a:	da01      	bge.n	80011a0 <Get_PPM_Level+0x28>
 800119c:	2302      	movs	r3, #2
 800119e:	e000      	b.n	80011a2 <Get_PPM_Level+0x2a>
    return 3;                                      // CRITICAL - LED đỏ nháy 2-10Hz (> 300 ppm)
 80011a0:	2303      	movs	r3, #3
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <Update_LED_Smart>:

// ==== LED Control đã sửa ====
void Update_LED_Smart(int ppm) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
    uint8_t level = Get_PPM_Level(ppm);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ffdf 	bl	8001178 <Get_PPM_Level>
 80011ba:	4603      	mov	r3, r0
 80011bc:	74fb      	strb	r3, [r7, #19]
    uint32_t current_time = loop_counter;
 80011be:	4b45      	ldr	r3, [pc, #276]	@ (80012d4 <Update_LED_Smart+0x128>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	60fb      	str	r3, [r7, #12]

    switch(level) {
 80011c4:	7cfb      	ldrb	r3, [r7, #19]
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d87f      	bhi.n	80012ca <Update_LED_Smart+0x11e>
 80011ca:	a201      	add	r2, pc, #4	@ (adr r2, 80011d0 <Update_LED_Smart+0x24>)
 80011cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d0:	080011e1 	.word	0x080011e1
 80011d4:	080011ed 	.word	0x080011ed
 80011d8:	080011f9 	.word	0x080011f9
 80011dc:	08001241 	.word	0x08001241
        case 0: // SAFE - LED xanh dương
            Set_RGB_LED(0, 0, 1);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2100      	movs	r1, #0
 80011e4:	2000      	movs	r0, #0
 80011e6:	f000 fee7 	bl	8001fb8 <Set_RGB_LED>
            break;
 80011ea:	e06e      	b.n	80012ca <Update_LED_Smart+0x11e>

        case 1: // WARNING - LED vàng
            Set_RGB_LED(1, 1, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2101      	movs	r1, #1
 80011f0:	2001      	movs	r0, #1
 80011f2:	f000 fee1 	bl	8001fb8 <Set_RGB_LED>
            break;
 80011f6:	e068      	b.n	80012ca <Update_LED_Smart+0x11e>

        case 2: // DANGER - LED đỏ nháy 1Hz (500ms on/off)
            if (current_time - last_led_update >= 500) {
 80011f8:	4b37      	ldr	r3, [pc, #220]	@ (80012d8 <Update_LED_Smart+0x12c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001204:	d35e      	bcc.n	80012c4 <Update_LED_Smart+0x118>
                led_blink_state = !led_blink_state;
 8001206:	4b35      	ldr	r3, [pc, #212]	@ (80012dc <Update_LED_Smart+0x130>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	bf0c      	ite	eq
 800120e:	2301      	moveq	r3, #1
 8001210:	2300      	movne	r3, #0
 8001212:	b2db      	uxtb	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	4b31      	ldr	r3, [pc, #196]	@ (80012dc <Update_LED_Smart+0x130>)
 8001218:	701a      	strb	r2, [r3, #0]
                if (led_blink_state) {
 800121a:	4b30      	ldr	r3, [pc, #192]	@ (80012dc <Update_LED_Smart+0x130>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d005      	beq.n	800122e <Update_LED_Smart+0x82>
                    Set_RGB_LED(1, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2001      	movs	r0, #1
 8001228:	f000 fec6 	bl	8001fb8 <Set_RGB_LED>
 800122c:	e004      	b.n	8001238 <Update_LED_Smart+0x8c>
                } else {
                    Set_RGB_LED(0, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	2000      	movs	r0, #0
 8001234:	f000 fec0 	bl	8001fb8 <Set_RGB_LED>
                }
                last_led_update = current_time;
 8001238:	4a27      	ldr	r2, [pc, #156]	@ (80012d8 <Update_LED_Smart+0x12c>)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6013      	str	r3, [r2, #0]
            }
            break;
 800123e:	e041      	b.n	80012c4 <Update_LED_Smart+0x118>

        case 3: // CRITICAL - LED đỏ nháy 2-10Hz (tăng tần số theo PPM > 300)
            {
                // Tính tần số nháy dựa trên mức độ nguy hiểm từ 300 ppm trở lên
                uint32_t blink_period;
                if (ppm >= 800) {
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001246:	db02      	blt.n	800124e <Update_LED_Smart+0xa2>
                    blink_period = 50;   // 10Hz (50ms on/off) - rất nguy hiểm
 8001248:	2332      	movs	r3, #50	@ 0x32
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	e016      	b.n	800127c <Update_LED_Smart+0xd0>
                } else if (ppm >= 600) {
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001254:	db02      	blt.n	800125c <Update_LED_Smart+0xb0>
                    blink_period = 67;   // 7.5Hz
 8001256:	2343      	movs	r3, #67	@ 0x43
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	e00f      	b.n	800127c <Update_LED_Smart+0xd0>
                } else if (ppm >= 500) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001262:	db02      	blt.n	800126a <Update_LED_Smart+0xbe>
                    blink_period = 100;  // 5Hz
 8001264:	2364      	movs	r3, #100	@ 0x64
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	e008      	b.n	800127c <Update_LED_Smart+0xd0>
                } else if (ppm >= 400) {
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001270:	db02      	blt.n	8001278 <Update_LED_Smart+0xcc>
                    blink_period = 167;  // 3Hz
 8001272:	23a7      	movs	r3, #167	@ 0xa7
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	e001      	b.n	800127c <Update_LED_Smart+0xd0>
                } else {
                    blink_period = 250;  // 2Hz (250ms on/off) - từ 300-400 ppm
 8001278:	23fa      	movs	r3, #250	@ 0xfa
 800127a:	617b      	str	r3, [r7, #20]
                }

                if (current_time - last_led_update >= blink_period) {
 800127c:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <Update_LED_Smart+0x12c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	429a      	cmp	r2, r3
 8001288:	d81e      	bhi.n	80012c8 <Update_LED_Smart+0x11c>
                    led_blink_state = !led_blink_state;
 800128a:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <Update_LED_Smart+0x130>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	bf0c      	ite	eq
 8001292:	2301      	moveq	r3, #1
 8001294:	2300      	movne	r3, #0
 8001296:	b2db      	uxtb	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <Update_LED_Smart+0x130>)
 800129c:	701a      	strb	r2, [r3, #0]
                    if (led_blink_state) {
 800129e:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <Update_LED_Smart+0x130>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d005      	beq.n	80012b2 <Update_LED_Smart+0x106>
                        Set_RGB_LED(1, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	2001      	movs	r0, #1
 80012ac:	f000 fe84 	bl	8001fb8 <Set_RGB_LED>
 80012b0:	e004      	b.n	80012bc <Update_LED_Smart+0x110>
                    } else {
                        Set_RGB_LED(0, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	2000      	movs	r0, #0
 80012b8:	f000 fe7e 	bl	8001fb8 <Set_RGB_LED>
                    }
                    last_led_update = current_time;
 80012bc:	4a06      	ldr	r2, [pc, #24]	@ (80012d8 <Update_LED_Smart+0x12c>)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6013      	str	r3, [r2, #0]
                }
            }
            break;
 80012c2:	e001      	b.n	80012c8 <Update_LED_Smart+0x11c>
            break;
 80012c4:	bf00      	nop
 80012c6:	e000      	b.n	80012ca <Update_LED_Smart+0x11e>
            break;
 80012c8:	bf00      	nop
    }
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000074 	.word	0x20000074
 80012d8:	20000094 	.word	0x20000094
 80012dc:	20000090 	.word	0x20000090

080012e0 <delay_ms>:

// ==== Delay function ====
void delay_ms(uint32_t ms) {
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    for(uint32_t i = 0; i < ms; i++) {
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	e00d      	b.n	800130a <delay_ms+0x2a>
        for(uint32_t j = 0; j < 8000; j++) {
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	e003      	b.n	80012fc <delay_ms+0x1c>
            __NOP();
 80012f4:	bf00      	nop
        for(uint32_t j = 0; j < 8000; j++) {
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	3301      	adds	r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001302:	d3f7      	bcc.n	80012f4 <delay_ms+0x14>
    for(uint32_t i = 0; i < ms; i++) {
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	3301      	adds	r3, #1
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	429a      	cmp	r2, r3
 8001310:	d3ed      	bcc.n	80012ee <delay_ms+0xe>
        }
    }
}
 8001312:	bf00      	nop
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
	...

08001320 <I2C1_Init>:

// ==== I2C1 Init for PB6(SCL), PB7(SDA) ====
void I2C1_Init(void) {
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1 << 21);
 8001324:	4b1c      	ldr	r3, [pc, #112]	@ (8001398 <I2C1_Init+0x78>)
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	4a1b      	ldr	r2, [pc, #108]	@ (8001398 <I2C1_Init+0x78>)
 800132a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800132e:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= (1 << 3);
 8001330:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <I2C1_Init+0x78>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a18      	ldr	r2, [pc, #96]	@ (8001398 <I2C1_Init+0x78>)
 8001336:	f043 0308 	orr.w	r3, r3, #8
 800133a:	6193      	str	r3, [r2, #24]

    GPIOB->CRL &= ~(0xF << 24);
 800133c:	4b17      	ldr	r3, [pc, #92]	@ (800139c <I2C1_Init+0x7c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a16      	ldr	r2, [pc, #88]	@ (800139c <I2C1_Init+0x7c>)
 8001342:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001346:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= (0xF << 24);
 8001348:	4b14      	ldr	r3, [pc, #80]	@ (800139c <I2C1_Init+0x7c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a13      	ldr	r2, [pc, #76]	@ (800139c <I2C1_Init+0x7c>)
 800134e:	f043 6370 	orr.w	r3, r3, #251658240	@ 0xf000000
 8001352:	6013      	str	r3, [r2, #0]

    GPIOB->CRL &= ~(0xF << 28);
 8001354:	4b11      	ldr	r3, [pc, #68]	@ (800139c <I2C1_Init+0x7c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a10      	ldr	r2, [pc, #64]	@ (800139c <I2C1_Init+0x7c>)
 800135a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800135e:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= (0xF << 28);
 8001360:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <I2C1_Init+0x7c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0d      	ldr	r2, [pc, #52]	@ (800139c <I2C1_Init+0x7c>)
 8001366:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800136a:	6013      	str	r3, [r2, #0]

    I2C1->CR1 = 0;
 800136c:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <I2C1_Init+0x80>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
    I2C1->CR2 = 36;
 8001372:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <I2C1_Init+0x80>)
 8001374:	2224      	movs	r2, #36	@ 0x24
 8001376:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 180;
 8001378:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <I2C1_Init+0x80>)
 800137a:	22b4      	movs	r2, #180	@ 0xb4
 800137c:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 37;
 800137e:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <I2C1_Init+0x80>)
 8001380:	2225      	movs	r2, #37	@ 0x25
 8001382:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= (1 << 0);
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <I2C1_Init+0x80>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a05      	ldr	r2, [pc, #20]	@ (80013a0 <I2C1_Init+0x80>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	40021000 	.word	0x40021000
 800139c:	40010c00 	.word	0x40010c00
 80013a0:	40005400 	.word	0x40005400

080013a4 <I2C1_SendBytes>:

void I2C1_SendBytes(uint8_t addr, uint8_t *data, uint8_t len) {
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
 80013b0:	4613      	mov	r3, r2
 80013b2:	71bb      	strb	r3, [r7, #6]
    while(I2C1->SR2 & (1 << 1));
 80013b4:	bf00      	nop
 80013b6:	4b24      	ldr	r3, [pc, #144]	@ (8001448 <I2C1_SendBytes+0xa4>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f9      	bne.n	80013b6 <I2C1_SendBytes+0x12>

    I2C1->CR1 |= (1 << 8);
 80013c2:	4b21      	ldr	r3, [pc, #132]	@ (8001448 <I2C1_SendBytes+0xa4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a20      	ldr	r2, [pc, #128]	@ (8001448 <I2C1_SendBytes+0xa4>)
 80013c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013cc:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & (1 << 0)));
 80013ce:	bf00      	nop
 80013d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001448 <I2C1_SendBytes+0xa4>)
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f9      	beq.n	80013d0 <I2C1_SendBytes+0x2c>

    I2C1->DR = addr;
 80013dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001448 <I2C1_SendBytes+0xa4>)
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	6113      	str	r3, [r2, #16]
    while(!(I2C1->SR1 & (1 << 1)));
 80013e2:	bf00      	nop
 80013e4:	4b18      	ldr	r3, [pc, #96]	@ (8001448 <I2C1_SendBytes+0xa4>)
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f9      	beq.n	80013e4 <I2C1_SendBytes+0x40>
    (void)I2C1->SR2;
 80013f0:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <I2C1_SendBytes+0xa4>)
 80013f2:	699b      	ldr	r3, [r3, #24]

    for(uint8_t i = 0; i < len; i++) {
 80013f4:	2300      	movs	r3, #0
 80013f6:	73fb      	strb	r3, [r7, #15]
 80013f8:	e00f      	b.n	800141a <I2C1_SendBytes+0x76>
        while(!(I2C1->SR1 & (1 << 7)));
 80013fa:	bf00      	nop
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <I2C1_SendBytes+0xa4>)
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f9      	beq.n	80013fc <I2C1_SendBytes+0x58>
        I2C1->DR = data[i];
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	4413      	add	r3, r2
 800140e:	781a      	ldrb	r2, [r3, #0]
 8001410:	4b0d      	ldr	r3, [pc, #52]	@ (8001448 <I2C1_SendBytes+0xa4>)
 8001412:	611a      	str	r2, [r3, #16]
    for(uint8_t i = 0; i < len; i++) {
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	3301      	adds	r3, #1
 8001418:	73fb      	strb	r3, [r7, #15]
 800141a:	7bfa      	ldrb	r2, [r7, #15]
 800141c:	79bb      	ldrb	r3, [r7, #6]
 800141e:	429a      	cmp	r2, r3
 8001420:	d3eb      	bcc.n	80013fa <I2C1_SendBytes+0x56>
    }

    while(!(I2C1->SR1 & (1 << 2)));
 8001422:	bf00      	nop
 8001424:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <I2C1_SendBytes+0xa4>)
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f9      	beq.n	8001424 <I2C1_SendBytes+0x80>
    I2C1->CR1 |= (1 << 9);
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <I2C1_SendBytes+0xa4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a04      	ldr	r2, [pc, #16]	@ (8001448 <I2C1_SendBytes+0xa4>)
 8001436:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40005400 	.word	0x40005400

0800144c <LCD_SendCommand>:

// ==== LCD Functions ====
void LCD_SendCommand(uint8_t cmd) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
    uint8_t data[4];
    data[0] = (cmd & 0xF0) | 0x0C;
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	f023 030f 	bic.w	r3, r3, #15
 800145e:	b25b      	sxtb	r3, r3
 8001460:	f043 030c 	orr.w	r3, r3, #12
 8001464:	b25b      	sxtb	r3, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	733b      	strb	r3, [r7, #12]
    data[1] = (cmd & 0xF0) | 0x08;
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	f023 030f 	bic.w	r3, r3, #15
 8001472:	b25b      	sxtb	r3, r3
 8001474:	f043 0308 	orr.w	r3, r3, #8
 8001478:	b25b      	sxtb	r3, r3
 800147a:	b2db      	uxtb	r3, r3
 800147c:	737b      	strb	r3, [r7, #13]
    data[2] = ((cmd << 4) & 0xF0) | 0x0C;
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	b25b      	sxtb	r3, r3
 8001484:	f043 030c 	orr.w	r3, r3, #12
 8001488:	b25b      	sxtb	r3, r3
 800148a:	b2db      	uxtb	r3, r3
 800148c:	73bb      	strb	r3, [r7, #14]
    data[3] = ((cmd << 4) & 0xF0) | 0x08;
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	b25b      	sxtb	r3, r3
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	b25b      	sxtb	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	73fb      	strb	r3, [r7, #15]
    I2C1_SendBytes(LCD_I2C_ADDR, data, 4);
 800149e:	f107 030c 	add.w	r3, r7, #12
 80014a2:	2204      	movs	r2, #4
 80014a4:	4619      	mov	r1, r3
 80014a6:	204e      	movs	r0, #78	@ 0x4e
 80014a8:	f7ff ff7c 	bl	80013a4 <I2C1_SendBytes>
    delay_ms(2);
 80014ac:	2002      	movs	r0, #2
 80014ae:	f7ff ff17 	bl	80012e0 <delay_ms>
}
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];
    buf[0] = (data & 0xF0) | 0x0D;
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	f023 030f 	bic.w	r3, r3, #15
 80014cc:	b25b      	sxtb	r3, r3
 80014ce:	f043 030d 	orr.w	r3, r3, #13
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	733b      	strb	r3, [r7, #12]
    buf[1] = (data & 0xF0) | 0x09;
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	f023 030f 	bic.w	r3, r3, #15
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	f043 0309 	orr.w	r3, r3, #9
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	737b      	strb	r3, [r7, #13]
    buf[2] = ((data << 4) & 0xF0) | 0x0D;
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	f043 030d 	orr.w	r3, r3, #13
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	73bb      	strb	r3, [r7, #14]
    buf[3] = ((data << 4) & 0xF0) | 0x09;
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	b25b      	sxtb	r3, r3
 8001502:	f043 0309 	orr.w	r3, r3, #9
 8001506:	b25b      	sxtb	r3, r3
 8001508:	b2db      	uxtb	r3, r3
 800150a:	73fb      	strb	r3, [r7, #15]
    I2C1_SendBytes(LCD_I2C_ADDR, buf, 4);
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	2204      	movs	r2, #4
 8001512:	4619      	mov	r1, r3
 8001514:	204e      	movs	r0, #78	@ 0x4e
 8001516:	f7ff ff45 	bl	80013a4 <I2C1_SendBytes>
    delay_ms(2);
 800151a:	2002      	movs	r0, #2
 800151c:	f7ff fee0 	bl	80012e0 <delay_ms>
}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <LCD_SendString>:

void LCD_SendString(char *str) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
    while(*str) {
 8001530:	e006      	b.n	8001540 <LCD_SendString+0x18>
        LCD_SendData(*str++);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ffbd 	bl	80014ba <LCD_SendData>
    while(*str) {
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f4      	bne.n	8001532 <LCD_SendString+0xa>
    }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <LCD_Init>:

void LCD_Init(void) {
 8001552:	b580      	push	{r7, lr}
 8001554:	af00      	add	r7, sp, #0
    delay_ms(50);
 8001556:	2032      	movs	r0, #50	@ 0x32
 8001558:	f7ff fec2 	bl	80012e0 <delay_ms>
    LCD_SendCommand(0x30);
 800155c:	2030      	movs	r0, #48	@ 0x30
 800155e:	f7ff ff75 	bl	800144c <LCD_SendCommand>
    delay_ms(5);
 8001562:	2005      	movs	r0, #5
 8001564:	f7ff febc 	bl	80012e0 <delay_ms>
    LCD_SendCommand(0x30);
 8001568:	2030      	movs	r0, #48	@ 0x30
 800156a:	f7ff ff6f 	bl	800144c <LCD_SendCommand>
    delay_ms(1);
 800156e:	2001      	movs	r0, #1
 8001570:	f7ff feb6 	bl	80012e0 <delay_ms>
    LCD_SendCommand(0x30);
 8001574:	2030      	movs	r0, #48	@ 0x30
 8001576:	f7ff ff69 	bl	800144c <LCD_SendCommand>
    delay_ms(1);
 800157a:	2001      	movs	r0, #1
 800157c:	f7ff feb0 	bl	80012e0 <delay_ms>
    LCD_SendCommand(0x02);
 8001580:	2002      	movs	r0, #2
 8001582:	f7ff ff63 	bl	800144c <LCD_SendCommand>
    delay_ms(1);
 8001586:	2001      	movs	r0, #1
 8001588:	f7ff feaa 	bl	80012e0 <delay_ms>
    LCD_SendCommand(0x28);
 800158c:	2028      	movs	r0, #40	@ 0x28
 800158e:	f7ff ff5d 	bl	800144c <LCD_SendCommand>
    delay_ms(1);
 8001592:	2001      	movs	r0, #1
 8001594:	f7ff fea4 	bl	80012e0 <delay_ms>
    LCD_SendCommand(0x08);
 8001598:	2008      	movs	r0, #8
 800159a:	f7ff ff57 	bl	800144c <LCD_SendCommand>
    delay_ms(1);
 800159e:	2001      	movs	r0, #1
 80015a0:	f7ff fe9e 	bl	80012e0 <delay_ms>
    LCD_SendCommand(0x01);
 80015a4:	2001      	movs	r0, #1
 80015a6:	f7ff ff51 	bl	800144c <LCD_SendCommand>
    delay_ms(2);
 80015aa:	2002      	movs	r0, #2
 80015ac:	f7ff fe98 	bl	80012e0 <delay_ms>
    LCD_SendCommand(0x06);
 80015b0:	2006      	movs	r0, #6
 80015b2:	f7ff ff4b 	bl	800144c <LCD_SendCommand>
    delay_ms(1);
 80015b6:	2001      	movs	r0, #1
 80015b8:	f7ff fe92 	bl	80012e0 <delay_ms>
    LCD_SendCommand(0x0C);
 80015bc:	200c      	movs	r0, #12
 80015be:	f7ff ff45 	bl	800144c <LCD_SendCommand>
    delay_ms(1);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f7ff fe8c 	bl	80012e0 <delay_ms>
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}

080015cc <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	460a      	mov	r2, r1
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	4613      	mov	r3, r2
 80015da:	71bb      	strb	r3, [r7, #6]
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d103      	bne.n	80015ea <LCD_SetCursor+0x1e>
 80015e2:	79bb      	ldrb	r3, [r7, #6]
 80015e4:	3b80      	subs	r3, #128	@ 0x80
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	e002      	b.n	80015f0 <LCD_SetCursor+0x24>
 80015ea:	79bb      	ldrb	r3, [r7, #6]
 80015ec:	3b40      	subs	r3, #64	@ 0x40
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(pos);
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff29 	bl	800144c <LCD_SendCommand>
    delay_ms(2);
 80015fa:	2002      	movs	r0, #2
 80015fc:	f7ff fe70 	bl	80012e0 <delay_ms>
}
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <LCD_Clear>:

void LCD_Clear(void) {
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01);
 800160c:	2001      	movs	r0, #1
 800160e:	f7ff ff1d 	bl	800144c <LCD_SendCommand>
    delay_ms(2);
 8001612:	2002      	movs	r0, #2
 8001614:	f7ff fe64 	bl	80012e0 <delay_ms>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <LCD_Should_Update>:

uint8_t LCD_Should_Update(uint16_t current_gas, uint8_t current_system_state, uint8_t current_relay_state) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b096      	sub	sp, #88	@ 0x58
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	80fb      	strh	r3, [r7, #6]
 8001626:	460b      	mov	r3, r1
 8001628:	717b      	strb	r3, [r7, #5]
 800162a:	4613      	mov	r3, r2
 800162c:	713b      	strb	r3, [r7, #4]
    if (current_system_state == 0) {
 800162e:	797b      	ldrb	r3, [r7, #5]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <LCD_Should_Update+0x1c>
        return 0;
 8001634:	2300      	movs	r3, #0
 8001636:	e09a      	b.n	800176e <LCD_Should_Update+0x152>
    }

    uint8_t should_update = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    uint32_t time_since_last_update = loop_counter - last_lcd_update_time;
 800163e:	4b4e      	ldr	r3, [pc, #312]	@ (8001778 <LCD_Should_Update+0x15c>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4b4e      	ldr	r3, [pc, #312]	@ (800177c <LCD_Should_Update+0x160>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	64fb      	str	r3, [r7, #76]	@ 0x4c

    uint8_t current_level = Get_Gas_Level(current_gas);
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	4618      	mov	r0, r3
 800164e:	f000 fca1 	bl	8001f94 <Get_Gas_Level>
 8001652:	4603      	mov	r3, r0
 8001654:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    uint8_t last_level = Get_Gas_Level(last_lcd_gas_value);
 8001658:	4b49      	ldr	r3, [pc, #292]	@ (8001780 <LCD_Should_Update+0x164>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f000 fc99 	bl	8001f94 <Get_Gas_Level>
 8001662:	4603      	mov	r3, r0
 8001664:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    if (current_level != last_level) {
 8001668:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800166c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001670:	429a      	cmp	r2, r3
 8001672:	d006      	beq.n	8001682 <LCD_Should_Update+0x66>
        should_update = 1;
 8001674:	2301      	movs	r3, #1
 8001676:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        send_text_message("LCD_UPDATE_GAS_LEVEL_CHANGED");
 800167a:	4842      	ldr	r0, [pc, #264]	@ (8001784 <LCD_Should_Update+0x168>)
 800167c:	f000 fa7c 	bl	8001b78 <send_text_message>
 8001680:	e073      	b.n	800176a <LCD_Should_Update+0x14e>
    }

    else if (abs((int)current_gas - (int)last_lcd_gas_value) >= 15) {
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	4a3e      	ldr	r2, [pc, #248]	@ (8001780 <LCD_Should_Update+0x164>)
 8001686:	8812      	ldrh	r2, [r2, #0]
 8001688:	1a9b      	subs	r3, r3, r2
 800168a:	2b00      	cmp	r3, #0
 800168c:	bfb8      	it	lt
 800168e:	425b      	neglt	r3, r3
 8001690:	2b0e      	cmp	r3, #14
 8001692:	dd11      	ble.n	80016b8 <LCD_Should_Update+0x9c>
        should_update = 1;
 8001694:	2301      	movs	r3, #1
 8001696:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        char msg[60];
        sprintf(msg, "LCD_UPDATE_GAS_CHANGED_%d_TO_%d", last_lcd_gas_value, current_gas);
 800169a:	4b39      	ldr	r3, [pc, #228]	@ (8001780 <LCD_Should_Update+0x164>)
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	f107 000c 	add.w	r0, r7, #12
 80016a6:	4938      	ldr	r1, [pc, #224]	@ (8001788 <LCD_Should_Update+0x16c>)
 80016a8:	f000 ffae 	bl	8002608 <siprintf>
        send_text_message(msg);
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 fa61 	bl	8001b78 <send_text_message>
 80016b6:	e058      	b.n	800176a <LCD_Should_Update+0x14e>
    }

    else if (relay_state != (current_relay_state)) {
 80016b8:	4b34      	ldr	r3, [pc, #208]	@ (800178c <LCD_Should_Update+0x170>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	793a      	ldrb	r2, [r7, #4]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d006      	beq.n	80016d0 <LCD_Should_Update+0xb4>
        should_update = 1;
 80016c2:	2301      	movs	r3, #1
 80016c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        send_text_message("LCD_UPDATE_RELAY_STATE_CHANGED");
 80016c8:	4831      	ldr	r0, [pc, #196]	@ (8001790 <LCD_Should_Update+0x174>)
 80016ca:	f000 fa55 	bl	8001b78 <send_text_message>
 80016ce:	e04c      	b.n	800176a <LCD_Should_Update+0x14e>
    }

    else if (!should_update) {
 80016d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d148      	bne.n	800176a <LCD_Should_Update+0x14e>
        uint32_t update_interval;

        switch(current_level) {
 80016d8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d81b      	bhi.n	8001718 <LCD_Should_Update+0xfc>
 80016e0:	a201      	add	r2, pc, #4	@ (adr r2, 80016e8 <LCD_Should_Update+0xcc>)
 80016e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e6:	bf00      	nop
 80016e8:	080016f9 	.word	0x080016f9
 80016ec:	08001701 	.word	0x08001701
 80016f0:	08001709 	.word	0x08001709
 80016f4:	08001711 	.word	0x08001711
            case 0: update_interval = 10000; break;
 80016f8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80016fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80016fe:	e00f      	b.n	8001720 <LCD_Should_Update+0x104>
            case 1: update_interval = 5000;  break;
 8001700:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001704:	653b      	str	r3, [r7, #80]	@ 0x50
 8001706:	e00b      	b.n	8001720 <LCD_Should_Update+0x104>
            case 2: update_interval = 3000;  break;
 8001708:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800170c:	653b      	str	r3, [r7, #80]	@ 0x50
 800170e:	e007      	b.n	8001720 <LCD_Should_Update+0x104>
            case 3: update_interval = 2000;  break;
 8001710:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001714:	653b      	str	r3, [r7, #80]	@ 0x50
 8001716:	e003      	b.n	8001720 <LCD_Should_Update+0x104>
            default: update_interval = 10000; break;
 8001718:	f242 7310 	movw	r3, #10000	@ 0x2710
 800171c:	653b      	str	r3, [r7, #80]	@ 0x50
 800171e:	bf00      	nop
        }

        if (time_since_last_update >= update_interval) {
 8001720:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001724:	429a      	cmp	r2, r3
 8001726:	d320      	bcc.n	800176a <LCD_Should_Update+0x14e>
            should_update = 1;
 8001728:	2301      	movs	r3, #1
 800172a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
            char msg[50];
            sprintf(msg, "LCD_UPDATE_PERIODIC_%s",
 800172e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00d      	beq.n	8001752 <LCD_Should_Update+0x136>
                    (current_level == 0) ? "SAFE" :
                    (current_level == 1) ? "WARN" :
 8001736:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800173a:	2b01      	cmp	r3, #1
 800173c:	d007      	beq.n	800174e <LCD_Should_Update+0x132>
                    (current_level == 2) ? "DANG" : "CRIT");
 800173e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001742:	2b02      	cmp	r3, #2
 8001744:	d101      	bne.n	800174a <LCD_Should_Update+0x12e>
 8001746:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <LCD_Should_Update+0x178>)
 8001748:	e004      	b.n	8001754 <LCD_Should_Update+0x138>
 800174a:	4b13      	ldr	r3, [pc, #76]	@ (8001798 <LCD_Should_Update+0x17c>)
 800174c:	e002      	b.n	8001754 <LCD_Should_Update+0x138>
                    (current_level == 1) ? "WARN" :
 800174e:	4b13      	ldr	r3, [pc, #76]	@ (800179c <LCD_Should_Update+0x180>)
 8001750:	e000      	b.n	8001754 <LCD_Should_Update+0x138>
            sprintf(msg, "LCD_UPDATE_PERIODIC_%s",
 8001752:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <LCD_Should_Update+0x184>)
 8001754:	f107 000c 	add.w	r0, r7, #12
 8001758:	461a      	mov	r2, r3
 800175a:	4912      	ldr	r1, [pc, #72]	@ (80017a4 <LCD_Should_Update+0x188>)
 800175c:	f000 ff54 	bl	8002608 <siprintf>
            send_text_message(msg);
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	4618      	mov	r0, r3
 8001766:	f000 fa07 	bl	8001b78 <send_text_message>
        }
    }

    return should_update;
 800176a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 800176e:	4618      	mov	r0, r3
 8001770:	3758      	adds	r7, #88	@ 0x58
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000074 	.word	0x20000074
 800177c:	2000008c 	.word	0x2000008c
 8001780:	20000088 	.word	0x20000088
 8001784:	08002f70 	.word	0x08002f70
 8001788:	08002f90 	.word	0x08002f90
 800178c:	2000007c 	.word	0x2000007c
 8001790:	08002fb0 	.word	0x08002fb0
 8001794:	08002fd0 	.word	0x08002fd0
 8001798:	08002fd8 	.word	0x08002fd8
 800179c:	08002fe0 	.word	0x08002fe0
 80017a0:	08002fe8 	.word	0x08002fe8
 80017a4:	08002ff0 	.word	0x08002ff0

080017a8 <LCD_Show_Stopped_Screen>:

void LCD_Show_Stopped_Screen(void) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
    if (lcd_stopped_screen_shown) return;
 80017ac:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <LCD_Show_Stopped_Screen+0x40>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d116      	bne.n	80017e2 <LCD_Show_Stopped_Screen+0x3a>

    LCD_Clear();
 80017b4:	f7ff ff28 	bl	8001608 <LCD_Clear>
    LCD_SetCursor(0, 0);
 80017b8:	2100      	movs	r1, #0
 80017ba:	2000      	movs	r0, #0
 80017bc:	f7ff ff06 	bl	80015cc <LCD_SetCursor>
    LCD_SendString("SYSTEM STOPPED");
 80017c0:	480a      	ldr	r0, [pc, #40]	@ (80017ec <LCD_Show_Stopped_Screen+0x44>)
 80017c2:	f7ff feb1 	bl	8001528 <LCD_SendString>
    LCD_SetCursor(1, 0);
 80017c6:	2100      	movs	r1, #0
 80017c8:	2001      	movs	r0, #1
 80017ca:	f7ff feff 	bl	80015cc <LCD_SetCursor>
    LCD_SendString("Press SW1 START");
 80017ce:	4808      	ldr	r0, [pc, #32]	@ (80017f0 <LCD_Show_Stopped_Screen+0x48>)
 80017d0:	f7ff feaa 	bl	8001528 <LCD_SendString>

    lcd_stopped_screen_shown = 1;
 80017d4:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <LCD_Show_Stopped_Screen+0x40>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
    send_text_message("LCD_STOPPED_SCREEN_DISPLAYED");
 80017da:	4806      	ldr	r0, [pc, #24]	@ (80017f4 <LCD_Show_Stopped_Screen+0x4c>)
 80017dc:	f000 f9cc 	bl	8001b78 <send_text_message>
 80017e0:	e000      	b.n	80017e4 <LCD_Show_Stopped_Screen+0x3c>
    if (lcd_stopped_screen_shown) return;
 80017e2:	bf00      	nop
}
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000087 	.word	0x20000087
 80017ec:	08003008 	.word	0x08003008
 80017f0:	08003018 	.word	0x08003018
 80017f4:	08003028 	.word	0x08003028

080017f8 <LCD_Update_Display>:

// ==== LCD hiển thị PPM đã sửa ====
void LCD_Update_Display(uint16_t gas_value, uint8_t system_state, uint8_t relay_state) {
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b0b1      	sub	sp, #196	@ 0xc4
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	4603      	mov	r3, r0
 8001800:	80fb      	strh	r3, [r7, #6]
 8001802:	460b      	mov	r3, r1
 8001804:	717b      	strb	r3, [r7, #5]
 8001806:	4613      	mov	r3, r2
 8001808:	713b      	strb	r3, [r7, #4]
    char line1[17], line2[17];

    // Tính PPM chính xác từ ADC
    int ppm = ADC_to_PPM_Fixed(gas_value);
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fb33 	bl	8000e78 <ADC_to_PPM_Fixed>
 8001812:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
    uint8_t ppm_level = Get_PPM_Level(ppm);
 8001816:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 800181a:	f7ff fcad 	bl	8001178 <Get_PPM_Level>
 800181e:	4603      	mov	r3, r0
 8001820:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

    const char* level_names[] = {"SAFE", "WARN", "DANG", "CRIT"};
 8001824:	4b38      	ldr	r3, [pc, #224]	@ (8001908 <LCD_Update_Display+0x110>)
 8001826:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 800182a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800182c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Dòng 1: Hiển thị PPM
    sprintf(line1, "PPM: %d", ppm);
 8001830:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001834:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001838:	4934      	ldr	r1, [pc, #208]	@ (800190c <LCD_Update_Display+0x114>)
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fee4 	bl	8002608 <siprintf>

    // Dòng 2: System status và level
    const char* sys_status = system_state ? "ON " : "OFF";
 8001840:	797b      	ldrb	r3, [r7, #5]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <LCD_Update_Display+0x52>
 8001846:	4b32      	ldr	r3, [pc, #200]	@ (8001910 <LCD_Update_Display+0x118>)
 8001848:	e000      	b.n	800184c <LCD_Update_Display+0x54>
 800184a:	4b32      	ldr	r3, [pc, #200]	@ (8001914 <LCD_Update_Display+0x11c>)
 800184c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    const char* relay_status = relay_state ? "R:ON" : "R:OFF";
 8001850:	793b      	ldrb	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <LCD_Update_Display+0x62>
 8001856:	4b30      	ldr	r3, [pc, #192]	@ (8001918 <LCD_Update_Display+0x120>)
 8001858:	e000      	b.n	800185c <LCD_Update_Display+0x64>
 800185a:	4b30      	ldr	r3, [pc, #192]	@ (800191c <LCD_Update_Display+0x124>)
 800185c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    sprintf(line2, "%s %s %s", sys_status, relay_status, level_names[ppm_level]);
 8001860:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	33b8      	adds	r3, #184	@ 0xb8
 8001868:	443b      	add	r3, r7
 800186a:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800186e:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001878:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800187c:	4928      	ldr	r1, [pc, #160]	@ (8001920 <LCD_Update_Display+0x128>)
 800187e:	f000 fec3 	bl	8002608 <siprintf>

    LCD_SetCursor(0, 0);
 8001882:	2100      	movs	r1, #0
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff fea1 	bl	80015cc <LCD_SetCursor>
    LCD_SendString("                ");
 800188a:	4826      	ldr	r0, [pc, #152]	@ (8001924 <LCD_Update_Display+0x12c>)
 800188c:	f7ff fe4c 	bl	8001528 <LCD_SendString>
    LCD_SetCursor(0, 0);
 8001890:	2100      	movs	r1, #0
 8001892:	2000      	movs	r0, #0
 8001894:	f7ff fe9a 	bl	80015cc <LCD_SetCursor>
    LCD_SendString(line1);
 8001898:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fe43 	bl	8001528 <LCD_SendString>

    LCD_SetCursor(1, 0);
 80018a2:	2100      	movs	r1, #0
 80018a4:	2001      	movs	r0, #1
 80018a6:	f7ff fe91 	bl	80015cc <LCD_SetCursor>
    LCD_SendString("                ");
 80018aa:	481e      	ldr	r0, [pc, #120]	@ (8001924 <LCD_Update_Display+0x12c>)
 80018ac:	f7ff fe3c 	bl	8001528 <LCD_SendString>
    LCD_SetCursor(1, 0);
 80018b0:	2100      	movs	r1, #0
 80018b2:	2001      	movs	r0, #1
 80018b4:	f7ff fe8a 	bl	80015cc <LCD_SetCursor>
    LCD_SendString(line2);
 80018b8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fe33 	bl	8001528 <LCD_SendString>

    lcd_stopped_screen_shown = 0;
 80018c2:	4b19      	ldr	r3, [pc, #100]	@ (8001928 <LCD_Update_Display+0x130>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
    last_lcd_gas_value = gas_value;
 80018c8:	4a18      	ldr	r2, [pc, #96]	@ (800192c <LCD_Update_Display+0x134>)
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	8013      	strh	r3, [r2, #0]
    last_lcd_update_time = loop_counter;
 80018ce:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <LCD_Update_Display+0x138>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a18      	ldr	r2, [pc, #96]	@ (8001934 <LCD_Update_Display+0x13c>)
 80018d4:	6013      	str	r3, [r2, #0]

    // Debug message
    char debug_msg[100];
    sprintf(debug_msg, "LCD_ADC_%d_PPM_%d_LEVEL_%s",
 80018d6:	88fa      	ldrh	r2, [r7, #6]
 80018d8:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	33b8      	adds	r3, #184	@ 0xb8
 80018e0:	443b      	add	r3, r7
 80018e2:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80018e6:	f107 000c 	add.w	r0, r7, #12
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80018f0:	4911      	ldr	r1, [pc, #68]	@ (8001938 <LCD_Update_Display+0x140>)
 80018f2:	f000 fe89 	bl	8002608 <siprintf>
            gas_value, ppm, level_names[ppm_level]);
    send_text_message(debug_msg);
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f93c 	bl	8001b78 <send_text_message>
}
 8001900:	bf00      	nop
 8001902:	37bc      	adds	r7, #188	@ 0xbc
 8001904:	46bd      	mov	sp, r7
 8001906:	bd90      	pop	{r4, r7, pc}
 8001908:	080030a4 	.word	0x080030a4
 800190c:	08003048 	.word	0x08003048
 8001910:	08003050 	.word	0x08003050
 8001914:	08003054 	.word	0x08003054
 8001918:	08003058 	.word	0x08003058
 800191c:	08003060 	.word	0x08003060
 8001920:	08003068 	.word	0x08003068
 8001924:	08003074 	.word	0x08003074
 8001928:	20000087 	.word	0x20000087
 800192c:	20000088 	.word	0x20000088
 8001930:	20000074 	.word	0x20000074
 8001934:	2000008c 	.word	0x2000008c
 8001938:	08003088 	.word	0x08003088

0800193c <SystemInit72MHz>:

// ==== System Clock 72MHz ====
void SystemInit72MHz(void) {
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001940:	4b24      	ldr	r3, [pc, #144]	@ (80019d4 <SystemInit72MHz+0x98>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a23      	ldr	r2, [pc, #140]	@ (80019d4 <SystemInit72MHz+0x98>)
 8001946:	f043 0310 	orr.w	r3, r3, #16
 800194a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= FLASH_ACR_LATENCY_2;
 800194c:	4b21      	ldr	r3, [pc, #132]	@ (80019d4 <SystemInit72MHz+0x98>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a20      	ldr	r2, [pc, #128]	@ (80019d4 <SystemInit72MHz+0x98>)
 8001952:	f043 0304 	orr.w	r3, r3, #4
 8001956:	6013      	str	r3, [r2, #0]

    RCC->CR |= RCC_CR_HSEON;
 8001958:	4b1f      	ldr	r3, [pc, #124]	@ (80019d8 <SystemInit72MHz+0x9c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a1e      	ldr	r2, [pc, #120]	@ (80019d8 <SystemInit72MHz+0x9c>)
 800195e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001962:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));
 8001964:	bf00      	nop
 8001966:	4b1c      	ldr	r3, [pc, #112]	@ (80019d8 <SystemInit72MHz+0x9c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f9      	beq.n	8001966 <SystemInit72MHz+0x2a>

    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV2 | RCC_CFGR_PPRE2_DIV1;
 8001972:	4b19      	ldr	r3, [pc, #100]	@ (80019d8 <SystemInit72MHz+0x9c>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4a18      	ldr	r2, [pc, #96]	@ (80019d8 <SystemInit72MHz+0x9c>)
 8001978:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800197c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL9;
 800197e:	4b16      	ldr	r3, [pc, #88]	@ (80019d8 <SystemInit72MHz+0x9c>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4a15      	ldr	r2, [pc, #84]	@ (80019d8 <SystemInit72MHz+0x9c>)
 8001984:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 8001988:	6053      	str	r3, [r2, #4]

    RCC->CR |= RCC_CR_PLLON;
 800198a:	4b13      	ldr	r3, [pc, #76]	@ (80019d8 <SystemInit72MHz+0x9c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a12      	ldr	r2, [pc, #72]	@ (80019d8 <SystemInit72MHz+0x9c>)
 8001990:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001994:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 8001996:	bf00      	nop
 8001998:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <SystemInit72MHz+0x9c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f9      	beq.n	8001998 <SystemInit72MHz+0x5c>

    RCC->CFGR &= ~RCC_CFGR_SW;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <SystemInit72MHz+0x9c>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	4a0b      	ldr	r2, [pc, #44]	@ (80019d8 <SystemInit72MHz+0x9c>)
 80019aa:	f023 0303 	bic.w	r3, r3, #3
 80019ae:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80019b0:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <SystemInit72MHz+0x9c>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4a08      	ldr	r2, [pc, #32]	@ (80019d8 <SystemInit72MHz+0x9c>)
 80019b6:	f043 0302 	orr.w	r3, r3, #2
 80019ba:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80019bc:	bf00      	nop
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <SystemInit72MHz+0x9c>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d1f9      	bne.n	80019be <SystemInit72MHz+0x82>
}
 80019ca:	bf00      	nop
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	40022000 	.word	0x40022000
 80019d8:	40021000 	.word	0x40021000

080019dc <timer_init>:

void timer_init(void) {
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80019e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a18 <timer_init+0x3c>)
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001a18 <timer_init+0x3c>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	61d3      	str	r3, [r2, #28]
    TIM2->PSC = 72 - 1;
 80019ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019f0:	2247      	movs	r2, #71	@ 0x47
 80019f2:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 0xFFFF;
 80019f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CR1 |= TIM_CR1_CEN;
 80019fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6013      	str	r3, [r2, #0]
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000

08001a1c <delay_us>:

void delay_us(uint32_t us) {
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
    TIM2->CNT = 0;
 8001a24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a28:	2200      	movs	r2, #0
 8001a2a:	625a      	str	r2, [r3, #36]	@ 0x24
    while (TIM2->CNT < us);
 8001a2c:	bf00      	nop
 8001a2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d8f9      	bhi.n	8001a2e <delay_us+0x12>
}
 8001a3a:	bf00      	nop
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr
	...

08001a48 <uart_init>:

void uart_init(void) {
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_USART1EN | RCC_APB2ENR_AFIOEN;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a8c <uart_init+0x44>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a0e      	ldr	r2, [pc, #56]	@ (8001a8c <uart_init+0x44>)
 8001a52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a56:	f043 0305 	orr.w	r3, r3, #5
 8001a5a:	6193      	str	r3, [r2, #24]

    GPIOA->CRH &= ~(GPIO_CRH_CNF9 | GPIO_CRH_MODE9);
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <uart_init+0x48>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	4a0b      	ldr	r2, [pc, #44]	@ (8001a90 <uart_init+0x48>)
 8001a62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a66:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (0x0B << 4);
 8001a68:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <uart_init+0x48>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4a08      	ldr	r2, [pc, #32]	@ (8001a90 <uart_init+0x48>)
 8001a6e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8001a72:	6053      	str	r3, [r2, #4]

    USART1->BRR = 72000000 / 9600;
 8001a74:	4b07      	ldr	r3, [pc, #28]	@ (8001a94 <uart_init+0x4c>)
 8001a76:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8001a7a:	609a      	str	r2, [r3, #8]
    USART1->CR1 = USART_CR1_TE | USART_CR1_UE;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <uart_init+0x4c>)
 8001a7e:	f242 0208 	movw	r2, #8200	@ 0x2008
 8001a82:	60da      	str	r2, [r3, #12]
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010800 	.word	0x40010800
 8001a94:	40013800 	.word	0x40013800

08001a98 <uart_send_text>:

void uart_send_text(char* str) {
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001aa0:	e00c      	b.n	8001abc <uart_send_text+0x24>
        while (!(USART1->SR & USART_SR_TXE));
 8001aa2:	bf00      	nop
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae0 <uart_send_text+0x48>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f9      	beq.n	8001aa4 <uart_send_text+0xc>
        USART1->DR = *str++;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <uart_send_text+0x48>)
 8001aba:	605a      	str	r2, [r3, #4]
    while (*str) {
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1ee      	bne.n	8001aa2 <uart_send_text+0xa>
    }
    while (!(USART1->SR & USART_SR_TC));
 8001ac4:	bf00      	nop
 8001ac6:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <uart_send_text+0x48>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f9      	beq.n	8001ac6 <uart_send_text+0x2e>
}
 8001ad2:	bf00      	nop
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40013800 	.word	0x40013800

08001ae4 <uart_send_bytes_sync>:

void uart_send_bytes_sync(uint8_t* data, uint8_t len) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	70fb      	strb	r3, [r7, #3]
    delay_us(500);
 8001af0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001af4:	f7ff ff92 	bl	8001a1c <delay_us>

    while (!(USART1->SR & USART_SR_TXE));
 8001af8:	bf00      	nop
 8001afa:	4b1e      	ldr	r3, [pc, #120]	@ (8001b74 <uart_send_bytes_sync+0x90>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f9      	beq.n	8001afa <uart_send_bytes_sync+0x16>
    USART1->DR = data[0];
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b74 <uart_send_bytes_sync+0x90>)
 8001b0c:	605a      	str	r2, [r3, #4]
    while (!(USART1->SR & USART_SR_TC));
 8001b0e:	bf00      	nop
 8001b10:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <uart_send_bytes_sync+0x90>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f9      	beq.n	8001b10 <uart_send_bytes_sync+0x2c>
    delay_us(PACKET_SYNC_DELAY * 2);
 8001b1c:	2064      	movs	r0, #100	@ 0x64
 8001b1e:	f7ff ff7d 	bl	8001a1c <delay_us>

    for (uint8_t i = 1; i < len; i++) {
 8001b22:	2301      	movs	r3, #1
 8001b24:	73fb      	strb	r3, [r7, #15]
 8001b26:	e019      	b.n	8001b5c <uart_send_bytes_sync+0x78>
        while (!(USART1->SR & USART_SR_TXE));
 8001b28:	bf00      	nop
 8001b2a:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <uart_send_bytes_sync+0x90>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f9      	beq.n	8001b2a <uart_send_bytes_sync+0x46>
        USART1->DR = data[i];
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	781a      	ldrb	r2, [r3, #0]
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b74 <uart_send_bytes_sync+0x90>)
 8001b40:	605a      	str	r2, [r3, #4]
        while (!(USART1->SR & USART_SR_TC));
 8001b42:	bf00      	nop
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <uart_send_bytes_sync+0x90>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f9      	beq.n	8001b44 <uart_send_bytes_sync+0x60>
        delay_us(PACKET_SYNC_DELAY);
 8001b50:	2032      	movs	r0, #50	@ 0x32
 8001b52:	f7ff ff63 	bl	8001a1c <delay_us>
    for (uint8_t i = 1; i < len; i++) {
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	7bfa      	ldrb	r2, [r7, #15]
 8001b5e:	78fb      	ldrb	r3, [r7, #3]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d3e1      	bcc.n	8001b28 <uart_send_bytes_sync+0x44>
    }

    delay_us(500);
 8001b64:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b68:	f7ff ff58 	bl	8001a1c <delay_us>
}
 8001b6c:	bf00      	nop
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40013800 	.word	0x40013800

08001b78 <send_text_message>:

void send_text_message(char* msg) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
    uart_send_text("TXT:");
 8001b80:	4806      	ldr	r0, [pc, #24]	@ (8001b9c <send_text_message+0x24>)
 8001b82:	f7ff ff89 	bl	8001a98 <uart_send_text>
    uart_send_text(msg);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ff86 	bl	8001a98 <uart_send_text>
    uart_send_text("\r\n");
 8001b8c:	4804      	ldr	r0, [pc, #16]	@ (8001ba0 <send_text_message+0x28>)
 8001b8e:	f7ff ff83 	bl	8001a98 <uart_send_text>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	080030b4 	.word	0x080030b4
 8001ba0:	080030bc 	.word	0x080030bc

08001ba4 <send_heartbeat_only>:

void send_heartbeat_only(void) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b094      	sub	sp, #80	@ 0x50
 8001ba8:	af00      	add	r7, sp, #0
    char hb_msg[80];
    sprintf(hb_msg, "HEARTBEAT_STATUS_%s_UPTIME_%lu_STANDARD_PPM_MODE",
            system_state ? "ACTIVE" : "STOPPED", loop_counter/1000);
 8001baa:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <send_heartbeat_only+0x3c>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	b2db      	uxtb	r3, r3
    sprintf(hb_msg, "HEARTBEAT_STATUS_%s_UPTIME_%lu_STANDARD_PPM_MODE",
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <send_heartbeat_only+0x14>
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8001be4 <send_heartbeat_only+0x40>)
 8001bb6:	e000      	b.n	8001bba <send_heartbeat_only+0x16>
 8001bb8:	4a0b      	ldr	r2, [pc, #44]	@ (8001be8 <send_heartbeat_only+0x44>)
 8001bba:	4b0c      	ldr	r3, [pc, #48]	@ (8001bec <send_heartbeat_only+0x48>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	490c      	ldr	r1, [pc, #48]	@ (8001bf0 <send_heartbeat_only+0x4c>)
 8001bc0:	fba1 1303 	umull	r1, r3, r1, r3
 8001bc4:	099b      	lsrs	r3, r3, #6
 8001bc6:	4638      	mov	r0, r7
 8001bc8:	490a      	ldr	r1, [pc, #40]	@ (8001bf4 <send_heartbeat_only+0x50>)
 8001bca:	f000 fd1d 	bl	8002608 <siprintf>
    send_text_message(hb_msg);
 8001bce:	463b      	mov	r3, r7
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ffd1 	bl	8001b78 <send_text_message>
}
 8001bd6:	bf00      	nop
 8001bd8:	3750      	adds	r7, #80	@ 0x50
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000070 	.word	0x20000070
 8001be4:	080030c0 	.word	0x080030c0
 8001be8:	080030c8 	.word	0x080030c8
 8001bec:	20000074 	.word	0x20000074
 8001bf0:	10624dd3 	.word	0x10624dd3
 8001bf4:	080030d0 	.word	0x080030d0

08001bf8 <calculate_crc16>:

uint16_t calculate_crc16(uint8_t* data, uint8_t len) {
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	70fb      	strb	r3, [r7, #3]
    uint16_t crc = 0xFFFF;
 8001c04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c08:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < len; i++) {
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	737b      	strb	r3, [r7, #13]
 8001c0e:	e022      	b.n	8001c56 <calculate_crc16+0x5e>
        crc ^= data[i];
 8001c10:	7b7b      	ldrb	r3, [r7, #13]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	89fb      	ldrh	r3, [r7, #14]
 8001c1c:	4053      	eors	r3, r2
 8001c1e:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8001c20:	2300      	movs	r3, #0
 8001c22:	733b      	strb	r3, [r7, #12]
 8001c24:	e011      	b.n	8001c4a <calculate_crc16+0x52>
            if (crc & 0x0001) {
 8001c26:	89fb      	ldrh	r3, [r7, #14]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d006      	beq.n	8001c3e <calculate_crc16+0x46>
                crc = (crc >> 1) ^ 0xA001;
 8001c30:	89fb      	ldrh	r3, [r7, #14]
 8001c32:	085b      	lsrs	r3, r3, #1
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	4b0d      	ldr	r3, [pc, #52]	@ (8001c6c <calculate_crc16+0x74>)
 8001c38:	4053      	eors	r3, r2
 8001c3a:	81fb      	strh	r3, [r7, #14]
 8001c3c:	e002      	b.n	8001c44 <calculate_crc16+0x4c>
            } else {
                crc = crc >> 1;
 8001c3e:	89fb      	ldrh	r3, [r7, #14]
 8001c40:	085b      	lsrs	r3, r3, #1
 8001c42:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8001c44:	7b3b      	ldrb	r3, [r7, #12]
 8001c46:	3301      	adds	r3, #1
 8001c48:	733b      	strb	r3, [r7, #12]
 8001c4a:	7b3b      	ldrb	r3, [r7, #12]
 8001c4c:	2b07      	cmp	r3, #7
 8001c4e:	d9ea      	bls.n	8001c26 <calculate_crc16+0x2e>
    for (uint8_t i = 0; i < len; i++) {
 8001c50:	7b7b      	ldrb	r3, [r7, #13]
 8001c52:	3301      	adds	r3, #1
 8001c54:	737b      	strb	r3, [r7, #13]
 8001c56:	7b7a      	ldrb	r2, [r7, #13]
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d3d8      	bcc.n	8001c10 <calculate_crc16+0x18>
            }
        }
    }
    return crc;
 8001c5e:	89fb      	ldrh	r3, [r7, #14]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	ffffa001 	.word	0xffffa001

08001c70 <send_binary_packet_sync>:

// ==== Gửi PPM đã sửa ====
void send_binary_packet_sync(uint16_t gas, uint8_t gas_level, uint8_t system_state, uint8_t relay_state) {
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b09b      	sub	sp, #108	@ 0x6c
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	4604      	mov	r4, r0
 8001c78:	4608      	mov	r0, r1
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4623      	mov	r3, r4
 8001c80:	80fb      	strh	r3, [r7, #6]
 8001c82:	4603      	mov	r3, r0
 8001c84:	717b      	strb	r3, [r7, #5]
 8001c86:	460b      	mov	r3, r1
 8001c88:	713b      	strb	r3, [r7, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	70fb      	strb	r3, [r7, #3]
    sensor_packet_t packet;

    // Chuyển ADC sang PPM chính xác
    int ppm = ADC_to_PPM_Fixed(gas);
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f8f1 	bl	8000e78 <ADC_to_PPM_Fixed>
 8001c96:	65f8      	str	r0, [r7, #92]	@ 0x5c
    uint16_t ppm_value = (uint16_t)ppm;
 8001c98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c9a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

    packet.start_marker = PACKET_START_MARKER;
 8001c9e:	2355      	movs	r3, #85	@ 0x55
 8001ca0:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    packet.header = PACKET_HEADER;
 8001ca4:	23aa      	movs	r3, #170	@ 0xaa
 8001ca6:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
    packet.gas_value = ppm_value;  // GỬI PPM đã sửa
 8001caa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001cae:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    packet.flags = (gas_level & 0x03) | ((system_state & 0x01) << 2) | ((relay_state & 0x01) << 3);
 8001cb2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	b25a      	sxtb	r2, r3
 8001cbc:	793b      	ldrb	r3, [r7, #4]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	b25b      	sxtb	r3, r3
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	b25b      	sxtb	r3, r3
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	b25a      	sxtb	r2, r3
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b25b      	sxtb	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
    packet.sequence = packet_sequence++;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <send_binary_packet_sync+0xdc>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	b2d1      	uxtb	r1, r2
 8001cea:	4a18      	ldr	r2, [pc, #96]	@ (8001d4c <send_binary_packet_sync+0xdc>)
 8001cec:	7011      	strb	r1, [r2, #0]
 8001cee:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    packet.reserved = 0x00;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    packet.end_marker = PACKET_END_MARKER;
 8001cf8:	2333      	movs	r3, #51	@ 0x33
 8001cfa:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51

    uint8_t* crc_data = ((uint8_t*)&packet) + 1;
 8001cfe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d02:	3301      	adds	r3, #1
 8001d04:	657b      	str	r3, [r7, #84]	@ 0x54
    packet.checksum = calculate_crc16(crc_data, sizeof(packet) - 4);
 8001d06:	2106      	movs	r1, #6
 8001d08:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001d0a:	f7ff ff75 	bl	8001bf8 <calculate_crc16>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f8a7 304f 	strh.w	r3, [r7, #79]	@ 0x4f

    uart_send_bytes_sync((uint8_t*)&packet, sizeof(packet));
 8001d14:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d18:	210a      	movs	r1, #10
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fee2 	bl	8001ae4 <uart_send_bytes_sync>

    char confirm_msg[60];
    sprintf(confirm_msg, "BINARY_PACKET_PPM_%d_ADC_%d_SEQ_%d", ppm_value, gas, packet_sequence-1);
 8001d20:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8001d24:	88f9      	ldrh	r1, [r7, #6]
 8001d26:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <send_binary_packet_sync+0xdc>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	f107 000c 	add.w	r0, r7, #12
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	460b      	mov	r3, r1
 8001d34:	4906      	ldr	r1, [pc, #24]	@ (8001d50 <send_binary_packet_sync+0xe0>)
 8001d36:	f000 fc67 	bl	8002608 <siprintf>
    send_text_message(confirm_msg);
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff1a 	bl	8001b78 <send_text_message>
}
 8001d44:	bf00      	nop
 8001d46:	3764      	adds	r7, #100	@ 0x64
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd90      	pop	{r4, r7, pc}
 8001d4c:	20000086 	.word	0x20000086
 8001d50:	08003104 	.word	0x08003104

08001d54 <GPIO_Config>:

void GPIO_Config(void) {
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc8 <GPIO_Config+0x74>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8001dc8 <GPIO_Config+0x74>)
 8001d5e:	f043 0304 	orr.w	r3, r3, #4
 8001d62:	6193      	str	r3, [r2, #24]

    GPIOA->CRL &= ~(0xF << (0 * 4));
 8001d64:	4b19      	ldr	r3, [pc, #100]	@ (8001dcc <GPIO_Config+0x78>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a18      	ldr	r2, [pc, #96]	@ (8001dcc <GPIO_Config+0x78>)
 8001d6a:	f023 030f 	bic.w	r3, r3, #15
 8001d6e:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (0x0 << (0 * 4));
 8001d70:	4b16      	ldr	r3, [pc, #88]	@ (8001dcc <GPIO_Config+0x78>)
 8001d72:	4a16      	ldr	r2, [pc, #88]	@ (8001dcc <GPIO_Config+0x78>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6013      	str	r3, [r2, #0]

    GPIOA->CRL &= ~((0xF << (1 * 4)) | (0xF << (2 * 4)) | (0xF << (3 * 4)) |
 8001d78:	4b14      	ldr	r3, [pc, #80]	@ (8001dcc <GPIO_Config+0x78>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4913      	ldr	r1, [pc, #76]	@ (8001dcc <GPIO_Config+0x78>)
 8001d7e:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <GPIO_Config+0x7c>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	600b      	str	r3, [r1, #0]
                    (0xF << (4 * 4)) | (0xF << (5 * 4)));
    GPIOA->CRL |=  ((0x2 << (1 * 4)) | (0x2 << (2 * 4)) | (0x2 << (3 * 4)) |
 8001d84:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <GPIO_Config+0x78>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4910      	ldr	r1, [pc, #64]	@ (8001dcc <GPIO_Config+0x78>)
 8001d8a:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <GPIO_Config+0x80>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]
                    (0x2 << (4 * 4)) | (0x2 << (5 * 4)));

    GPIOA->CRL &= ~((0xF << (6 * 4)) | (0xF << (7 * 4)));
 8001d90:	4b0e      	ldr	r3, [pc, #56]	@ (8001dcc <GPIO_Config+0x78>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0d      	ldr	r2, [pc, #52]	@ (8001dcc <GPIO_Config+0x78>)
 8001d96:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001d9a:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |=  ((0x8 << (6 * 4)) | (0x8 << (7 * 4)));
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <GPIO_Config+0x78>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0a      	ldr	r2, [pc, #40]	@ (8001dcc <GPIO_Config+0x78>)
 8001da2:	f043 4308 	orr.w	r3, r3, #2281701376	@ 0x88000000
 8001da6:	6013      	str	r3, [r2, #0]
    GPIOA->ODR |= (1 << 6) | (1 << 7);
 8001da8:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <GPIO_Config+0x78>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	4a07      	ldr	r2, [pc, #28]	@ (8001dcc <GPIO_Config+0x78>)
 8001dae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001db2:	60d3      	str	r3, [r2, #12]

    GPIOA->ODR &= ~((1 << 1) | (1 << 2) | (1 << 3) | (1 << 4) | (1 << 5));
 8001db4:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <GPIO_Config+0x78>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4a04      	ldr	r2, [pc, #16]	@ (8001dcc <GPIO_Config+0x78>)
 8001dba:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8001dbe:	60d3      	str	r3, [r2, #12]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40010800 	.word	0x40010800
 8001dd0:	ff00000f 	.word	0xff00000f
 8001dd4:	00222220 	.word	0x00222220

08001dd8 <ADC_Config>:

void ADC_Config(void) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8001e58 <ADC_Config+0x80>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e58 <ADC_Config+0x80>)
 8001de2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001de6:	6193      	str	r3, [r2, #24]
    RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <ADC_Config+0x80>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a1a      	ldr	r2, [pc, #104]	@ (8001e58 <ADC_Config+0x80>)
 8001dee:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001df2:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_ADCPRE_DIV6;
 8001df4:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <ADC_Config+0x80>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4a17      	ldr	r2, [pc, #92]	@ (8001e58 <ADC_Config+0x80>)
 8001dfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dfe:	6053      	str	r3, [r2, #4]

    ADC1->CR2 = 0;
 8001e00:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <ADC_Config+0x84>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
    ADC1->CR1 = 0;
 8001e06:	4b15      	ldr	r3, [pc, #84]	@ (8001e5c <ADC_Config+0x84>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	605a      	str	r2, [r3, #4]
    ADC1->SQR1 = 0;
 8001e0c:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <ADC_Config+0x84>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADC1->SQR2 = 0;
 8001e12:	4b12      	ldr	r3, [pc, #72]	@ (8001e5c <ADC_Config+0x84>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC1->SQR3 = 0;
 8001e18:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <ADC_Config+0x84>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->SMPR2 = 0x7;
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <ADC_Config+0x84>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	611a      	str	r2, [r3, #16]

    ADC1->CR2 |= ADC_CR2_ADON;
 8001e24:	4b0d      	ldr	r3, [pc, #52]	@ (8001e5c <ADC_Config+0x84>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4a0c      	ldr	r2, [pc, #48]	@ (8001e5c <ADC_Config+0x84>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6093      	str	r3, [r2, #8]
    delay_ms(2);
 8001e30:	2002      	movs	r0, #2
 8001e32:	f7ff fa55 	bl	80012e0 <delay_ms>

    ADC1->CR2 |= ADC_CR2_CAL;
 8001e36:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <ADC_Config+0x84>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	4a08      	ldr	r2, [pc, #32]	@ (8001e5c <ADC_Config+0x84>)
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	6093      	str	r3, [r2, #8]
    while (ADC1->CR2 & ADC_CR2_CAL);
 8001e42:	bf00      	nop
 8001e44:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <ADC_Config+0x84>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f9      	bne.n	8001e44 <ADC_Config+0x6c>
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40012400 	.word	0x40012400

08001e60 <Read_MQ2_Fast>:

uint16_t Read_MQ2_Fast(void) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]

    for(int i = 0; i < 5; i++) {  // Tăng số lần đọc để ổn định hơn
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	e01a      	b.n	8001ea6 <Read_MQ2_Fast+0x46>
        ADC1->SQR3 = 0;
 8001e70:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <Read_MQ2_Fast+0x60>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	635a      	str	r2, [r3, #52]	@ 0x34
        ADC1->CR2 |= ADC_CR2_ADON;
 8001e76:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <Read_MQ2_Fast+0x60>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	4a11      	ldr	r2, [pc, #68]	@ (8001ec0 <Read_MQ2_Fast+0x60>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6093      	str	r3, [r2, #8]
        while (!(ADC1->SR & ADC_SR_EOC));
 8001e82:	bf00      	nop
 8001e84:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec0 <Read_MQ2_Fast+0x60>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f9      	beq.n	8001e84 <Read_MQ2_Fast+0x24>
        sum += ADC1->DR;
 8001e90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <Read_MQ2_Fast+0x60>)
 8001e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	4413      	add	r3, r2
 8001e98:	607b      	str	r3, [r7, #4]
        delay_us(200);  // Tăng delay giữa các lần đọc
 8001e9a:	20c8      	movs	r0, #200	@ 0xc8
 8001e9c:	f7ff fdbe 	bl	8001a1c <delay_us>
    for(int i = 0; i < 5; i++) {  // Tăng số lần đọc để ổn định hơn
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	dde1      	ble.n	8001e70 <Read_MQ2_Fast+0x10>
    }

    return sum / 5;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a05      	ldr	r2, [pc, #20]	@ (8001ec4 <Read_MQ2_Fast+0x64>)
 8001eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	b29b      	uxth	r3, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40012400 	.word	0x40012400
 8001ec4:	cccccccd 	.word	0xcccccccd

08001ec8 <Update_Gas_Reading>:

void Update_Gas_Reading(void) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
    if (system_state == 1) {
 8001ece:	4b16      	ldr	r3, [pc, #88]	@ (8001f28 <Update_Gas_Reading+0x60>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d11a      	bne.n	8001f0e <Update_Gas_Reading+0x46>
        gas_sensor.current_gas = Read_MQ2_Fast();
 8001ed8:	f7ff ffc2 	bl	8001e60 <Read_MQ2_Fast>
 8001edc:	4603      	mov	r3, r0
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <Update_Gas_Reading+0x64>)
 8001ee2:	801a      	strh	r2, [r3, #0]

        // Tính gas level dựa trên PPM chính xác
        int ppm = ADC_to_PPM_Fixed(gas_sensor.current_gas);
 8001ee4:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <Update_Gas_Reading+0x64>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe ffc5 	bl	8000e78 <ADC_to_PPM_Fixed>
 8001eee:	6078      	str	r0, [r7, #4]
        gas_sensor.current_level = Get_PPM_Level(ppm);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff f941 	bl	8001178 <Get_PPM_Level>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <Update_Gas_Reading+0x64>)
 8001efc:	709a      	strb	r2, [r3, #2]

        gas_sensor.last_read_time = loop_counter;
 8001efe:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <Update_Gas_Reading+0x68>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <Update_Gas_Reading+0x64>)
 8001f04:	6053      	str	r3, [r2, #4]
        gas_sensor.valid_data = 1;
 8001f06:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <Update_Gas_Reading+0x64>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	721a      	strb	r2, [r3, #8]
    } else {
        gas_sensor.current_gas = 0;
        gas_sensor.current_level = 0;
        gas_sensor.valid_data = 0;
    }
}
 8001f0c:	e008      	b.n	8001f20 <Update_Gas_Reading+0x58>
        gas_sensor.current_gas = 0;
 8001f0e:	4b07      	ldr	r3, [pc, #28]	@ (8001f2c <Update_Gas_Reading+0x64>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	801a      	strh	r2, [r3, #0]
        gas_sensor.current_level = 0;
 8001f14:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <Update_Gas_Reading+0x64>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	709a      	strb	r2, [r3, #2]
        gas_sensor.valid_data = 0;
 8001f1a:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <Update_Gas_Reading+0x64>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	721a      	strb	r2, [r3, #8]
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000070 	.word	0x20000070
 8001f2c:	20000098 	.word	0x20000098
 8001f30:	20000074 	.word	0x20000074

08001f34 <Read_Button_Fast>:

uint8_t Read_Button_Fast(uint8_t pin) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
    if ((GPIOA->IDR & (1 << pin)) == 0) {
 8001f3e:	4b14      	ldr	r3, [pc, #80]	@ (8001f90 <Read_Button_Fast+0x5c>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	79fa      	ldrb	r2, [r7, #7]
 8001f44:	2101      	movs	r1, #1
 8001f46:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d11a      	bne.n	8001f86 <Read_Button_Fast+0x52>
        delay_ms(10);
 8001f50:	200a      	movs	r0, #10
 8001f52:	f7ff f9c5 	bl	80012e0 <delay_ms>
        if ((GPIOA->IDR & (1 << pin)) == 0) {
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <Read_Button_Fast+0x5c>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	79fa      	ldrb	r2, [r7, #7]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10e      	bne.n	8001f86 <Read_Button_Fast+0x52>
            while ((GPIOA->IDR & (1 << pin)) == 0);
 8001f68:	bf00      	nop
 8001f6a:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <Read_Button_Fast+0x5c>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	79fa      	ldrb	r2, [r7, #7]
 8001f70:	2101      	movs	r1, #1
 8001f72:	fa01 f202 	lsl.w	r2, r1, r2
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f6      	beq.n	8001f6a <Read_Button_Fast+0x36>
            delay_ms(10);
 8001f7c:	200a      	movs	r0, #10
 8001f7e:	f7ff f9af 	bl	80012e0 <delay_ms>
            return 1;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <Read_Button_Fast+0x54>
        }
    }
    return 0;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40010800 	.word	0x40010800

08001f94 <Get_Gas_Level>:

uint8_t Get_Gas_Level(uint16_t gas_value) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	80fb      	strh	r3, [r7, #6]
    // Chuyển sang dùng PPM để xác định level
    int ppm = ADC_to_PPM_Fixed(gas_value);
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe ff69 	bl	8000e78 <ADC_to_PPM_Fixed>
 8001fa6:	60f8      	str	r0, [r7, #12]
    return Get_PPM_Level(ppm);
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f7ff f8e5 	bl	8001178 <Get_PPM_Level>
 8001fae:	4603      	mov	r3, r0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <Set_RGB_LED>:

void Set_RGB_LED(uint8_t red, uint8_t green, uint8_t blue) {
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	71bb      	strb	r3, [r7, #6]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	717b      	strb	r3, [r7, #5]
    GPIOA->ODR &= ~((1 << 1) | (1 << 2) | (1 << 3));
 8001fca:	4b13      	ldr	r3, [pc, #76]	@ (8002018 <Set_RGB_LED+0x60>)
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	4a12      	ldr	r2, [pc, #72]	@ (8002018 <Set_RGB_LED+0x60>)
 8001fd0:	f023 030e 	bic.w	r3, r3, #14
 8001fd4:	60d3      	str	r3, [r2, #12]
    if (red)   GPIOA->ODR |= (1 << 1);
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <Set_RGB_LED+0x30>
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002018 <Set_RGB_LED+0x60>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8002018 <Set_RGB_LED+0x60>)
 8001fe2:	f043 0302 	orr.w	r3, r3, #2
 8001fe6:	60d3      	str	r3, [r2, #12]
    if (green) GPIOA->ODR |= (1 << 2);
 8001fe8:	79bb      	ldrb	r3, [r7, #6]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <Set_RGB_LED+0x42>
 8001fee:	4b0a      	ldr	r3, [pc, #40]	@ (8002018 <Set_RGB_LED+0x60>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	4a09      	ldr	r2, [pc, #36]	@ (8002018 <Set_RGB_LED+0x60>)
 8001ff4:	f043 0304 	orr.w	r3, r3, #4
 8001ff8:	60d3      	str	r3, [r2, #12]
    if (blue)  GPIOA->ODR |= (1 << 3);
 8001ffa:	797b      	ldrb	r3, [r7, #5]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <Set_RGB_LED+0x54>
 8002000:	4b05      	ldr	r3, [pc, #20]	@ (8002018 <Set_RGB_LED+0x60>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	4a04      	ldr	r2, [pc, #16]	@ (8002018 <Set_RGB_LED+0x60>)
 8002006:	f043 0308 	orr.w	r3, r3, #8
 800200a:	60d3      	str	r3, [r2, #12]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40010800 	.word	0x40010800

0800201c <Update_Relay_Smart>:

// ==== Relay dựa trên PPM đã sửa ====
void Update_Relay_Smart(uint16_t gas_value) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b094      	sub	sp, #80	@ 0x50
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	80fb      	strh	r3, [r7, #6]
    uint32_t time_since_change = loop_counter - relay_last_change_time;
 8002026:	4b2b      	ldr	r3, [pc, #172]	@ (80020d4 <Update_Relay_Smart+0xb8>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4b2b      	ldr	r3, [pc, #172]	@ (80020d8 <Update_Relay_Smart+0xbc>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Chuyển ADC sang PPM chính xác
    int ppm = ADC_to_PPM_Fixed(gas_value);
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe ff1f 	bl	8000e78 <ADC_to_PPM_Fixed>
 800203a:	64b8      	str	r0, [r7, #72]	@ 0x48

    if (relay_state == 0) {
 800203c:	4b27      	ldr	r3, [pc, #156]	@ (80020dc <Update_Relay_Smart+0xc0>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d121      	bne.n	8002088 <Update_Relay_Smart+0x6c>
        if (ppm > PPM_RELAY_ON_THRESHOLD && time_since_change > RELAY_MIN_OFF_TIME) {
 8002044:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002046:	2bfa      	cmp	r3, #250	@ 0xfa
 8002048:	dd3f      	ble.n	80020ca <Update_Relay_Smart+0xae>
 800204a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800204c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002050:	4293      	cmp	r3, r2
 8002052:	d93a      	bls.n	80020ca <Update_Relay_Smart+0xae>
            relay_state = 1;
 8002054:	4b21      	ldr	r3, [pc, #132]	@ (80020dc <Update_Relay_Smart+0xc0>)
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
            GPIOA->ODR |= (1 << 5);
 800205a:	4b21      	ldr	r3, [pc, #132]	@ (80020e0 <Update_Relay_Smart+0xc4>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	4a20      	ldr	r2, [pc, #128]	@ (80020e0 <Update_Relay_Smart+0xc4>)
 8002060:	f043 0320 	orr.w	r3, r3, #32
 8002064:	60d3      	str	r3, [r2, #12]
            relay_last_change_time = loop_counter;
 8002066:	4b1b      	ldr	r3, [pc, #108]	@ (80020d4 <Update_Relay_Smart+0xb8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a1b      	ldr	r2, [pc, #108]	@ (80020d8 <Update_Relay_Smart+0xbc>)
 800206c:	6013      	str	r3, [r2, #0]

            char msg[60];
            sprintf(msg, "RELAY_ON_PPM_%d", ppm);
 800206e:	f107 030c 	add.w	r3, r7, #12
 8002072:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002074:	491b      	ldr	r1, [pc, #108]	@ (80020e4 <Update_Relay_Smart+0xc8>)
 8002076:	4618      	mov	r0, r3
 8002078:	f000 fac6 	bl	8002608 <siprintf>
            send_text_message(msg);
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fd79 	bl	8001b78 <send_text_message>
            char msg[60];
            sprintf(msg, "RELAY_OFF_PPM_%d", ppm);
            send_text_message(msg);
        }
    }
}
 8002086:	e020      	b.n	80020ca <Update_Relay_Smart+0xae>
        if (ppm < PPM_RELAY_OFF_THRESHOLD && time_since_change > RELAY_MIN_ON_TIME) {
 8002088:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800208a:	2b95      	cmp	r3, #149	@ 0x95
 800208c:	dc1d      	bgt.n	80020ca <Update_Relay_Smart+0xae>
 800208e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002094:	4293      	cmp	r3, r2
 8002096:	d918      	bls.n	80020ca <Update_Relay_Smart+0xae>
            relay_state = 0;
 8002098:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <Update_Relay_Smart+0xc0>)
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
            GPIOA->ODR &= ~(1 << 5);
 800209e:	4b10      	ldr	r3, [pc, #64]	@ (80020e0 <Update_Relay_Smart+0xc4>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	4a0f      	ldr	r2, [pc, #60]	@ (80020e0 <Update_Relay_Smart+0xc4>)
 80020a4:	f023 0320 	bic.w	r3, r3, #32
 80020a8:	60d3      	str	r3, [r2, #12]
            relay_last_change_time = loop_counter;
 80020aa:	4b0a      	ldr	r3, [pc, #40]	@ (80020d4 <Update_Relay_Smart+0xb8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a0a      	ldr	r2, [pc, #40]	@ (80020d8 <Update_Relay_Smart+0xbc>)
 80020b0:	6013      	str	r3, [r2, #0]
            sprintf(msg, "RELAY_OFF_PPM_%d", ppm);
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020b8:	490b      	ldr	r1, [pc, #44]	@ (80020e8 <Update_Relay_Smart+0xcc>)
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 faa4 	bl	8002608 <siprintf>
            send_text_message(msg);
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fd57 	bl	8001b78 <send_text_message>
}
 80020ca:	bf00      	nop
 80020cc:	3750      	adds	r7, #80	@ 0x50
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000074 	.word	0x20000074
 80020d8:	20000080 	.word	0x20000080
 80020dc:	2000007c 	.word	0x2000007c
 80020e0:	40010800 	.word	0x40010800
 80020e4:	08003128 	.word	0x08003128
 80020e8:	08003138 	.word	0x08003138

080020ec <main>:

// ==== MAIN ====
int main(void) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b09c      	sub	sp, #112	@ 0x70
 80020f0:	af02      	add	r7, sp, #8
    SystemInit72MHz();
 80020f2:	f7ff fc23 	bl	800193c <SystemInit72MHz>
    timer_init();
 80020f6:	f7ff fc71 	bl	80019dc <timer_init>
    GPIO_Config();
 80020fa:	f7ff fe2b 	bl	8001d54 <GPIO_Config>
    ADC_Config();
 80020fe:	f7ff fe6b 	bl	8001dd8 <ADC_Config>
    uart_init();
 8002102:	f7ff fca1 	bl	8001a48 <uart_init>

    I2C1_Init();
 8002106:	f7ff f90b 	bl	8001320 <I2C1_Init>
    delay_ms(100);
 800210a:	2064      	movs	r0, #100	@ 0x64
 800210c:	f7ff f8e8 	bl	80012e0 <delay_ms>
    LCD_Init();
 8002110:	f7ff fa1f 	bl	8001552 <LCD_Init>

    delay_ms(1000);
 8002114:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002118:	f7ff f8e2 	bl	80012e0 <delay_ms>

    LCD_Clear();
 800211c:	f7ff fa74 	bl	8001608 <LCD_Clear>
    LCD_SetCursor(0, 0);
 8002120:	2100      	movs	r1, #0
 8002122:	2000      	movs	r0, #0
 8002124:	f7ff fa52 	bl	80015cc <LCD_SetCursor>
    LCD_SendString("STM32F103C8T6");
 8002128:	4894      	ldr	r0, [pc, #592]	@ (800237c <main+0x290>)
 800212a:	f7ff f9fd 	bl	8001528 <LCD_SendString>
    LCD_SetCursor(1, 0);
 800212e:	2100      	movs	r1, #0
 8002130:	2001      	movs	r0, #1
 8002132:	f7ff fa4b 	bl	80015cc <LCD_SetCursor>
    LCD_SendString("STANDARD PPM v3.0");
 8002136:	4892      	ldr	r0, [pc, #584]	@ (8002380 <main+0x294>)
 8002138:	f7ff f9f6 	bl	8001528 <LCD_SendString>

    send_text_message("STM32_START_STANDARD_PPM_THRESHOLDS_MODE");
 800213c:	4891      	ldr	r0, [pc, #580]	@ (8002384 <main+0x298>)
 800213e:	f7ff fd1b 	bl	8001b78 <send_text_message>

    // Khởi động với LED xanh lá cây (hệ thống dừng)
    for(int i = 0; i < 3; i++) {
 8002142:	2300      	movs	r3, #0
 8002144:	667b      	str	r3, [r7, #100]	@ 0x64
 8002146:	e012      	b.n	800216e <main+0x82>
        Set_RGB_LED(0, 1, 0);
 8002148:	2200      	movs	r2, #0
 800214a:	2101      	movs	r1, #1
 800214c:	2000      	movs	r0, #0
 800214e:	f7ff ff33 	bl	8001fb8 <Set_RGB_LED>
        delay_ms(200);
 8002152:	20c8      	movs	r0, #200	@ 0xc8
 8002154:	f7ff f8c4 	bl	80012e0 <delay_ms>
        Set_RGB_LED(0, 0, 0);
 8002158:	2200      	movs	r2, #0
 800215a:	2100      	movs	r1, #0
 800215c:	2000      	movs	r0, #0
 800215e:	f7ff ff2b 	bl	8001fb8 <Set_RGB_LED>
        delay_ms(200);
 8002162:	20c8      	movs	r0, #200	@ 0xc8
 8002164:	f7ff f8bc 	bl	80012e0 <delay_ms>
    for(int i = 0; i < 3; i++) {
 8002168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800216a:	3301      	adds	r3, #1
 800216c:	667b      	str	r3, [r7, #100]	@ 0x64
 800216e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002170:	2b02      	cmp	r3, #2
 8002172:	dde9      	ble.n	8002148 <main+0x5c>
    }

    send_text_message("READY_STANDARD_PPM_50_200_300_500_THRESHOLDS");
 8002174:	4884      	ldr	r0, [pc, #528]	@ (8002388 <main+0x29c>)
 8002176:	f7ff fcff 	bl	8001b78 <send_text_message>
    LCD_Show_Stopped_Screen();
 800217a:	f7ff fb15 	bl	80017a8 <LCD_Show_Stopped_Screen>

    while (1) {
        loop_counter++;
 800217e:	4b83      	ldr	r3, [pc, #524]	@ (800238c <main+0x2a0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3301      	adds	r3, #1
 8002184:	4a81      	ldr	r2, [pc, #516]	@ (800238c <main+0x2a0>)
 8002186:	6013      	str	r3, [r2, #0]

        Update_Gas_Reading();
 8002188:	f7ff fe9e 	bl	8001ec8 <Update_Gas_Reading>

        if (Read_Button_Fast(6)) {
 800218c:	2006      	movs	r0, #6
 800218e:	f7ff fed1 	bl	8001f34 <Read_Button_Fast>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d031      	beq.n	80021fc <main+0x110>
            system_state = !system_state;
 8002198:	4b7d      	ldr	r3, [pc, #500]	@ (8002390 <main+0x2a4>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	bf0c      	ite	eq
 80021a2:	2301      	moveq	r3, #1
 80021a4:	2300      	movne	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b79      	ldr	r3, [pc, #484]	@ (8002390 <main+0x2a4>)
 80021ac:	701a      	strb	r2, [r3, #0]

            if (system_state) {
 80021ae:	4b78      	ldr	r3, [pc, #480]	@ (8002390 <main+0x2a4>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d01a      	beq.n	80021ee <main+0x102>
                Update_Gas_Reading();
 80021b8:	f7ff fe86 	bl	8001ec8 <Update_Gas_Reading>
                send_binary_packet_sync(gas_sensor.current_gas, gas_sensor.current_level,
 80021bc:	4b75      	ldr	r3, [pc, #468]	@ (8002394 <main+0x2a8>)
 80021be:	8818      	ldrh	r0, [r3, #0]
 80021c0:	4b74      	ldr	r3, [pc, #464]	@ (8002394 <main+0x2a8>)
 80021c2:	7899      	ldrb	r1, [r3, #2]
 80021c4:	4b72      	ldr	r3, [pc, #456]	@ (8002390 <main+0x2a4>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	4b73      	ldr	r3, [pc, #460]	@ (8002398 <main+0x2ac>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	f7ff fd4f 	bl	8001c70 <send_binary_packet_sync>
                                       system_state, relay_state);

                LCD_Update_Display(gas_sensor.current_gas, system_state, relay_state);
 80021d2:	4b70      	ldr	r3, [pc, #448]	@ (8002394 <main+0x2a8>)
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	4a6e      	ldr	r2, [pc, #440]	@ (8002390 <main+0x2a4>)
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	b2d1      	uxtb	r1, r2
 80021dc:	4a6e      	ldr	r2, [pc, #440]	@ (8002398 <main+0x2ac>)
 80021de:	7812      	ldrb	r2, [r2, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fb09 	bl	80017f8 <LCD_Update_Display>

                send_text_message("BTN_SW1_SYSTEM_ACTIVATED_STANDARD_PPM");
 80021e6:	486d      	ldr	r0, [pc, #436]	@ (800239c <main+0x2b0>)
 80021e8:	f7ff fcc6 	bl	8001b78 <send_text_message>
 80021ec:	e006      	b.n	80021fc <main+0x110>
            } else {
                send_heartbeat_only();
 80021ee:	f7ff fcd9 	bl	8001ba4 <send_heartbeat_only>
                LCD_Show_Stopped_Screen();
 80021f2:	f7ff fad9 	bl	80017a8 <LCD_Show_Stopped_Screen>
                send_text_message("BTN_SW1_SYSTEM_STOPPED");
 80021f6:	486a      	ldr	r0, [pc, #424]	@ (80023a0 <main+0x2b4>)
 80021f8:	f7ff fcbe 	bl	8001b78 <send_text_message>
            }
        }

        if (Read_Button_Fast(7)) {
 80021fc:	2007      	movs	r0, #7
 80021fe:	f7ff fe99 	bl	8001f34 <Read_Button_Fast>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d009      	beq.n	800221c <main+0x130>
            system_state = 0;
 8002208:	4b61      	ldr	r3, [pc, #388]	@ (8002390 <main+0x2a4>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
            send_heartbeat_only();
 800220e:	f7ff fcc9 	bl	8001ba4 <send_heartbeat_only>
            LCD_Show_Stopped_Screen();
 8002212:	f7ff fac9 	bl	80017a8 <LCD_Show_Stopped_Screen>
            send_text_message("BTN_SW2_RESET_TO_STOPPED");
 8002216:	4863      	ldr	r0, [pc, #396]	@ (80023a4 <main+0x2b8>)
 8002218:	f7ff fcae 	bl	8001b78 <send_text_message>
        }

        if (system_state) {
 800221c:	4b5c      	ldr	r3, [pc, #368]	@ (8002390 <main+0x2a4>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8110 	beq.w	8002448 <main+0x35c>
            Update_Relay_Smart(gas_sensor.current_gas);
 8002228:	4b5a      	ldr	r3, [pc, #360]	@ (8002394 <main+0x2a8>)
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fef5 	bl	800201c <Update_Relay_Smart>

            // LED control dựa trên PPM chính xác - SỬA CHÍNH
            int current_ppm = ADC_to_PPM_Fixed(gas_sensor.current_gas);
 8002232:	4b58      	ldr	r3, [pc, #352]	@ (8002394 <main+0x2a8>)
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe fe1e 	bl	8000e78 <ADC_to_PPM_Fixed>
 800223c:	65b8      	str	r0, [r7, #88]	@ 0x58
            Update_LED_Smart(current_ppm);
 800223e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002240:	f7fe ffb4 	bl	80011ac <Update_LED_Smart>

            // Buzzer control
            uint8_t ppm_level = Get_PPM_Level(current_ppm);
 8002244:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002246:	f7fe ff97 	bl	8001178 <Get_PPM_Level>
 800224a:	4603      	mov	r3, r0
 800224c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
            if (ppm_level >= 2) {  // DANGER hoặc CRITICAL
 8002250:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002254:	2b01      	cmp	r3, #1
 8002256:	d906      	bls.n	8002266 <main+0x17a>
                GPIOA->ODR |= (1 << 4);  // Bật buzzer
 8002258:	4b53      	ldr	r3, [pc, #332]	@ (80023a8 <main+0x2bc>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a52      	ldr	r2, [pc, #328]	@ (80023a8 <main+0x2bc>)
 800225e:	f043 0310 	orr.w	r3, r3, #16
 8002262:	60d3      	str	r3, [r2, #12]
 8002264:	e005      	b.n	8002272 <main+0x186>
            } else {
                GPIOA->ODR &= ~(1 << 4); // Tắt buzzer
 8002266:	4b50      	ldr	r3, [pc, #320]	@ (80023a8 <main+0x2bc>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	4a4f      	ldr	r2, [pc, #316]	@ (80023a8 <main+0x2bc>)
 800226c:	f023 0310 	bic.w	r3, r3, #16
 8002270:	60d3      	str	r3, [r2, #12]
            }

            if (LCD_Should_Update(gas_sensor.current_gas, system_state, relay_state)) {
 8002272:	4b48      	ldr	r3, [pc, #288]	@ (8002394 <main+0x2a8>)
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	4a46      	ldr	r2, [pc, #280]	@ (8002390 <main+0x2a4>)
 8002278:	7812      	ldrb	r2, [r2, #0]
 800227a:	b2d1      	uxtb	r1, r2
 800227c:	4a46      	ldr	r2, [pc, #280]	@ (8002398 <main+0x2ac>)
 800227e:	7812      	ldrb	r2, [r2, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff f9cb 	bl	800161c <LCD_Should_Update>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d009      	beq.n	80022a0 <main+0x1b4>
                LCD_Update_Display(gas_sensor.current_gas, system_state, relay_state);
 800228c:	4b41      	ldr	r3, [pc, #260]	@ (8002394 <main+0x2a8>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	4a3f      	ldr	r2, [pc, #252]	@ (8002390 <main+0x2a4>)
 8002292:	7812      	ldrb	r2, [r2, #0]
 8002294:	b2d1      	uxtb	r1, r2
 8002296:	4a40      	ldr	r2, [pc, #256]	@ (8002398 <main+0x2ac>)
 8002298:	7812      	ldrb	r2, [r2, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff faac 	bl	80017f8 <LCD_Update_Display>
            }

            uint8_t should_send = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

            if (system_state != last_sent_state) {
 80022a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002390 <main+0x2a4>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	4b3f      	ldr	r3, [pc, #252]	@ (80023ac <main+0x2c0>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d006      	beq.n	80022c2 <main+0x1d6>
                should_send = 1;
 80022b4:	2301      	movs	r3, #1
 80022b6:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                send_text_message("SEND_SYSTEM_STATE_CHANGED");
 80022ba:	483d      	ldr	r0, [pc, #244]	@ (80023b0 <main+0x2c4>)
 80022bc:	f7ff fc5c 	bl	8001b78 <send_text_message>
 80022c0:	e038      	b.n	8002334 <main+0x248>
            } else {
                uint8_t current_level = gas_sensor.current_level;
 80022c2:	4b34      	ldr	r3, [pc, #208]	@ (8002394 <main+0x2a8>)
 80022c4:	789b      	ldrb	r3, [r3, #2]
 80022c6:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t last_level = Get_Gas_Level(last_sent_gas);
 80022ca:	4b3a      	ldr	r3, [pc, #232]	@ (80023b4 <main+0x2c8>)
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fe60 	bl	8001f94 <Get_Gas_Level>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

                if (last_level == 0 && current_level > 0) {
 80022da:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10a      	bne.n	80022f8 <main+0x20c>
 80022e2:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d006      	beq.n	80022f8 <main+0x20c>
                    should_send = 1;
 80022ea:	2301      	movs	r3, #1
 80022ec:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                    send_text_message("SEND_GAS_DETECTED");
 80022f0:	4831      	ldr	r0, [pc, #196]	@ (80023b8 <main+0x2cc>)
 80022f2:	f7ff fc41 	bl	8001b78 <send_text_message>
 80022f6:	e01d      	b.n	8002334 <main+0x248>
                }
                else if (abs((int)gas_sensor.current_gas - (int)last_sent_gas) > 30) {
 80022f8:	4b26      	ldr	r3, [pc, #152]	@ (8002394 <main+0x2a8>)
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b2d      	ldr	r3, [pc, #180]	@ (80023b4 <main+0x2c8>)
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	bfb8      	it	lt
 8002308:	425b      	neglt	r3, r3
 800230a:	2b1e      	cmp	r3, #30
 800230c:	dd06      	ble.n	800231c <main+0x230>
                    should_send = 1;
 800230e:	2301      	movs	r3, #1
 8002310:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                    send_text_message("SEND_GAS_SIGNIFICANT_CHANGE");
 8002314:	4829      	ldr	r0, [pc, #164]	@ (80023bc <main+0x2d0>)
 8002316:	f7ff fc2f 	bl	8001b78 <send_text_message>
 800231a:	e00b      	b.n	8002334 <main+0x248>
                }
                else if (current_level != last_level) {
 800231c:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8002320:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002324:	429a      	cmp	r2, r3
 8002326:	d005      	beq.n	8002334 <main+0x248>
                    should_send = 1;
 8002328:	2301      	movs	r3, #1
 800232a:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                    send_text_message("SEND_GAS_LEVEL_CHANGED");
 800232e:	4824      	ldr	r0, [pc, #144]	@ (80023c0 <main+0x2d4>)
 8002330:	f7ff fc22 	bl	8001b78 <send_text_message>
                }
            }

            if (!should_send) {
 8002334:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8002338:	2b00      	cmp	r3, #0
 800233a:	d156      	bne.n	80023ea <main+0x2fe>
                uint32_t send_interval;
                switch(gas_sensor.current_level) {
 800233c:	4b15      	ldr	r3, [pc, #84]	@ (8002394 <main+0x2a8>)
 800233e:	789b      	ldrb	r3, [r3, #2]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d83f      	bhi.n	80023c4 <main+0x2d8>
 8002344:	a201      	add	r2, pc, #4	@ (adr r2, 800234c <main+0x260>)
 8002346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234a:	bf00      	nop
 800234c:	0800235d 	.word	0x0800235d
 8002350:	08002365 	.word	0x08002365
 8002354:	0800236d 	.word	0x0800236d
 8002358:	08002375 	.word	0x08002375
                    case 0: send_interval = 15000; break; // SAFE
 800235c:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8002360:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002362:	e033      	b.n	80023cc <main+0x2e0>
                    case 1: send_interval = 8000;  break; // WARNING
 8002364:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002368:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800236a:	e02f      	b.n	80023cc <main+0x2e0>
                    case 2: send_interval = 5000;  break; // DANGER
 800236c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002370:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002372:	e02b      	b.n	80023cc <main+0x2e0>
                    case 3: send_interval = 3000;  break; // CRITICAL
 8002374:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002378:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800237a:	e027      	b.n	80023cc <main+0x2e0>
 800237c:	0800314c 	.word	0x0800314c
 8002380:	0800315c 	.word	0x0800315c
 8002384:	08003170 	.word	0x08003170
 8002388:	0800319c 	.word	0x0800319c
 800238c:	20000074 	.word	0x20000074
 8002390:	20000070 	.word	0x20000070
 8002394:	20000098 	.word	0x20000098
 8002398:	2000007c 	.word	0x2000007c
 800239c:	080031cc 	.word	0x080031cc
 80023a0:	080031f4 	.word	0x080031f4
 80023a4:	0800320c 	.word	0x0800320c
 80023a8:	40010800 	.word	0x40010800
 80023ac:	20000000 	.word	0x20000000
 80023b0:	08003228 	.word	0x08003228
 80023b4:	20000084 	.word	0x20000084
 80023b8:	08003244 	.word	0x08003244
 80023bc:	08003258 	.word	0x08003258
 80023c0:	08003274 	.word	0x08003274
                    default: send_interval = 15000; break;
 80023c4:	f643 2398 	movw	r3, #15000	@ 0x3a98
 80023c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023ca:	bf00      	nop
                }

                static uint32_t last_send_time = 0;
                if (loop_counter - last_send_time >= send_interval) {
 80023cc:	4b33      	ldr	r3, [pc, #204]	@ (800249c <main+0x3b0>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b33      	ldr	r3, [pc, #204]	@ (80024a0 <main+0x3b4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80023d8:	429a      	cmp	r2, r3
 80023da:	d806      	bhi.n	80023ea <main+0x2fe>
                    should_send = 1;
 80023dc:	2301      	movs	r3, #1
 80023de:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                    last_send_time = loop_counter;
 80023e2:	4b2e      	ldr	r3, [pc, #184]	@ (800249c <main+0x3b0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a2e      	ldr	r2, [pc, #184]	@ (80024a0 <main+0x3b4>)
 80023e8:	6013      	str	r3, [r2, #0]
                }
            }

            if (should_send) {
 80023ea:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d050      	beq.n	8002494 <main+0x3a8>
                send_binary_packet_sync(gas_sensor.current_gas, gas_sensor.current_level,
 80023f2:	4b2c      	ldr	r3, [pc, #176]	@ (80024a4 <main+0x3b8>)
 80023f4:	8818      	ldrh	r0, [r3, #0]
 80023f6:	4b2b      	ldr	r3, [pc, #172]	@ (80024a4 <main+0x3b8>)
 80023f8:	7899      	ldrb	r1, [r3, #2]
 80023fa:	4b2b      	ldr	r3, [pc, #172]	@ (80024a8 <main+0x3bc>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	4b2a      	ldr	r3, [pc, #168]	@ (80024ac <main+0x3c0>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	f7ff fc34 	bl	8001c70 <send_binary_packet_sync>
                                       system_state, relay_state);

                // Gửi thêm PPM data chính xác
                char ppm_msg[80];
                int ppm = ADC_to_PPM_Fixed(gas_sensor.current_gas);
 8002408:	4b26      	ldr	r3, [pc, #152]	@ (80024a4 <main+0x3b8>)
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fd33 	bl	8000e78 <ADC_to_PPM_Fixed>
 8002412:	6538      	str	r0, [r7, #80]	@ 0x50
                sprintf(ppm_msg, "PPM_DATA,PPM:%d,LEVEL:%d,ADC:%d",
                        ppm, gas_sensor.current_level, gas_sensor.current_gas);
 8002414:	4b23      	ldr	r3, [pc, #140]	@ (80024a4 <main+0x3b8>)
 8002416:	789b      	ldrb	r3, [r3, #2]
                sprintf(ppm_msg, "PPM_DATA,PPM:%d,LEVEL:%d,ADC:%d",
 8002418:	461a      	mov	r2, r3
                        ppm, gas_sensor.current_level, gas_sensor.current_gas);
 800241a:	4b22      	ldr	r3, [pc, #136]	@ (80024a4 <main+0x3b8>)
 800241c:	881b      	ldrh	r3, [r3, #0]
                sprintf(ppm_msg, "PPM_DATA,PPM:%d,LEVEL:%d,ADC:%d",
 800241e:	4638      	mov	r0, r7
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	4613      	mov	r3, r2
 8002424:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002426:	4922      	ldr	r1, [pc, #136]	@ (80024b0 <main+0x3c4>)
 8002428:	f000 f8ee 	bl	8002608 <siprintf>
                send_text_message(ppm_msg);
 800242c:	463b      	mov	r3, r7
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fba2 	bl	8001b78 <send_text_message>

                last_sent_gas = gas_sensor.current_gas;
 8002434:	4b1b      	ldr	r3, [pc, #108]	@ (80024a4 <main+0x3b8>)
 8002436:	881a      	ldrh	r2, [r3, #0]
 8002438:	4b1e      	ldr	r3, [pc, #120]	@ (80024b4 <main+0x3c8>)
 800243a:	801a      	strh	r2, [r3, #0]
                last_sent_state = system_state;
 800243c:	4b1a      	ldr	r3, [pc, #104]	@ (80024a8 <main+0x3bc>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4b1d      	ldr	r3, [pc, #116]	@ (80024b8 <main+0x3cc>)
 8002444:	701a      	strb	r2, [r3, #0]
 8002446:	e025      	b.n	8002494 <main+0x3a8>
            }

        } else {
            // Hệ thống dừng - LED xanh lá cây
            Set_RGB_LED(0, 1, 0);
 8002448:	2200      	movs	r2, #0
 800244a:	2101      	movs	r1, #1
 800244c:	2000      	movs	r0, #0
 800244e:	f7ff fdb3 	bl	8001fb8 <Set_RGB_LED>
            GPIOA->ODR &= ~(1 << 4);  // Tắt buzzer
 8002452:	4b1a      	ldr	r3, [pc, #104]	@ (80024bc <main+0x3d0>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	4a19      	ldr	r2, [pc, #100]	@ (80024bc <main+0x3d0>)
 8002458:	f023 0310 	bic.w	r3, r3, #16
 800245c:	60d3      	str	r3, [r2, #12]
            GPIOA->ODR &= ~(1 << 5);  // Tắt relay
 800245e:	4b17      	ldr	r3, [pc, #92]	@ (80024bc <main+0x3d0>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	4a16      	ldr	r2, [pc, #88]	@ (80024bc <main+0x3d0>)
 8002464:	f023 0320 	bic.w	r3, r3, #32
 8002468:	60d3      	str	r3, [r2, #12]
            relay_state = 0;
 800246a:	4b10      	ldr	r3, [pc, #64]	@ (80024ac <main+0x3c0>)
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
            led_blink_counter = 0;
 8002470:	4b13      	ldr	r3, [pc, #76]	@ (80024c0 <main+0x3d4>)
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]

            static uint32_t last_heartbeat_time = 0;
            if (loop_counter - last_heartbeat_time >= 45000) {
 8002476:	4b09      	ldr	r3, [pc, #36]	@ (800249c <main+0x3b0>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4b12      	ldr	r3, [pc, #72]	@ (80024c4 <main+0x3d8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 8002484:	4293      	cmp	r3, r2
 8002486:	d905      	bls.n	8002494 <main+0x3a8>
                send_heartbeat_only();
 8002488:	f7ff fb8c 	bl	8001ba4 <send_heartbeat_only>
                last_heartbeat_time = loop_counter;
 800248c:	4b03      	ldr	r3, [pc, #12]	@ (800249c <main+0x3b0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0c      	ldr	r2, [pc, #48]	@ (80024c4 <main+0x3d8>)
 8002492:	6013      	str	r3, [r2, #0]
            }
        }

        delay_ms(1);
 8002494:	2001      	movs	r0, #1
 8002496:	f7fe ff23 	bl	80012e0 <delay_ms>
        loop_counter++;
 800249a:	e670      	b.n	800217e <main+0x92>
 800249c:	20000074 	.word	0x20000074
 80024a0:	200000a4 	.word	0x200000a4
 80024a4:	20000098 	.word	0x20000098
 80024a8:	20000070 	.word	0x20000070
 80024ac:	2000007c 	.word	0x2000007c
 80024b0:	0800328c 	.word	0x0800328c
 80024b4:	20000084 	.word	0x20000084
 80024b8:	20000000 	.word	0x20000000
 80024bc:	40010800 	.word	0x40010800
 80024c0:	20000078 	.word	0x20000078
 80024c4:	200000a8 	.word	0x200000a8

080024c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <NMI_Handler+0x4>

080024d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <HardFault_Handler+0x4>

080024d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024dc:	bf00      	nop
 80024de:	e7fd      	b.n	80024dc <MemManage_Handler+0x4>

080024e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024e4:	bf00      	nop
 80024e6:	e7fd      	b.n	80024e4 <BusFault_Handler+0x4>

080024e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024ec:	bf00      	nop
 80024ee:	e7fd      	b.n	80024ec <UsageFault_Handler+0x4>

080024f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002518:	f000 f864 	bl	80025e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}

08002520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002528:	4a14      	ldr	r2, [pc, #80]	@ (800257c <_sbrk+0x5c>)
 800252a:	4b15      	ldr	r3, [pc, #84]	@ (8002580 <_sbrk+0x60>)
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002534:	4b13      	ldr	r3, [pc, #76]	@ (8002584 <_sbrk+0x64>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d102      	bne.n	8002542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800253c:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <_sbrk+0x64>)
 800253e:	4a12      	ldr	r2, [pc, #72]	@ (8002588 <_sbrk+0x68>)
 8002540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002542:	4b10      	ldr	r3, [pc, #64]	@ (8002584 <_sbrk+0x64>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	429a      	cmp	r2, r3
 800254e:	d207      	bcs.n	8002560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002550:	f000 f87a 	bl	8002648 <__errno>
 8002554:	4603      	mov	r3, r0
 8002556:	220c      	movs	r2, #12
 8002558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800255a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800255e:	e009      	b.n	8002574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002560:	4b08      	ldr	r3, [pc, #32]	@ (8002584 <_sbrk+0x64>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002566:	4b07      	ldr	r3, [pc, #28]	@ (8002584 <_sbrk+0x64>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4413      	add	r3, r2
 800256e:	4a05      	ldr	r2, [pc, #20]	@ (8002584 <_sbrk+0x64>)
 8002570:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002572:	68fb      	ldr	r3, [r7, #12]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20005000 	.word	0x20005000
 8002580:	00000400 	.word	0x00000400
 8002584:	200000ac 	.word	0x200000ac
 8002588:	20000200 	.word	0x20000200

0800258c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002598:	f7ff fff8 	bl	800258c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800259c:	480b      	ldr	r0, [pc, #44]	@ (80025cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800259e:	490c      	ldr	r1, [pc, #48]	@ (80025d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025a0:	4a0c      	ldr	r2, [pc, #48]	@ (80025d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80025a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a4:	e002      	b.n	80025ac <LoopCopyDataInit>

080025a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025aa:	3304      	adds	r3, #4

080025ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b0:	d3f9      	bcc.n	80025a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025b2:	4a09      	ldr	r2, [pc, #36]	@ (80025d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80025b4:	4c09      	ldr	r4, [pc, #36]	@ (80025dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b8:	e001      	b.n	80025be <LoopFillZerobss>

080025ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025bc:	3204      	adds	r2, #4

080025be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c0:	d3fb      	bcc.n	80025ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025c2:	f000 f847 	bl	8002654 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025c6:	f7ff fd91 	bl	80020ec <main>
  bx lr
 80025ca:	4770      	bx	lr
  ldr r0, =_sdata
 80025cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80025d4:	080032e8 	.word	0x080032e8
  ldr r2, =_sbss
 80025d8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80025dc:	200001fc 	.word	0x200001fc

080025e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025e0:	e7fe      	b.n	80025e0 <ADC1_2_IRQHandler>
	...

080025e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e8:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <HAL_IncTick+0x1c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b05      	ldr	r3, [pc, #20]	@ (8002604 <HAL_IncTick+0x20>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4413      	add	r3, r2
 80025f4:	4a03      	ldr	r2, [pc, #12]	@ (8002604 <HAL_IncTick+0x20>)
 80025f6:	6013      	str	r3, [r2, #0]
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	20000001 	.word	0x20000001
 8002604:	200000b0 	.word	0x200000b0

08002608 <siprintf>:
 8002608:	b40e      	push	{r1, r2, r3}
 800260a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800260e:	b500      	push	{lr}
 8002610:	b09c      	sub	sp, #112	@ 0x70
 8002612:	ab1d      	add	r3, sp, #116	@ 0x74
 8002614:	9002      	str	r0, [sp, #8]
 8002616:	9006      	str	r0, [sp, #24]
 8002618:	9107      	str	r1, [sp, #28]
 800261a:	9104      	str	r1, [sp, #16]
 800261c:	4808      	ldr	r0, [pc, #32]	@ (8002640 <siprintf+0x38>)
 800261e:	4909      	ldr	r1, [pc, #36]	@ (8002644 <siprintf+0x3c>)
 8002620:	f853 2b04 	ldr.w	r2, [r3], #4
 8002624:	9105      	str	r1, [sp, #20]
 8002626:	6800      	ldr	r0, [r0, #0]
 8002628:	a902      	add	r1, sp, #8
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	f000 f894 	bl	8002758 <_svfiprintf_r>
 8002630:	2200      	movs	r2, #0
 8002632:	9b02      	ldr	r3, [sp, #8]
 8002634:	701a      	strb	r2, [r3, #0]
 8002636:	b01c      	add	sp, #112	@ 0x70
 8002638:	f85d eb04 	ldr.w	lr, [sp], #4
 800263c:	b003      	add	sp, #12
 800263e:	4770      	bx	lr
 8002640:	20000004 	.word	0x20000004
 8002644:	ffff0208 	.word	0xffff0208

08002648 <__errno>:
 8002648:	4b01      	ldr	r3, [pc, #4]	@ (8002650 <__errno+0x8>)
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20000004 	.word	0x20000004

08002654 <__libc_init_array>:
 8002654:	b570      	push	{r4, r5, r6, lr}
 8002656:	2600      	movs	r6, #0
 8002658:	4d0c      	ldr	r5, [pc, #48]	@ (800268c <__libc_init_array+0x38>)
 800265a:	4c0d      	ldr	r4, [pc, #52]	@ (8002690 <__libc_init_array+0x3c>)
 800265c:	1b64      	subs	r4, r4, r5
 800265e:	10a4      	asrs	r4, r4, #2
 8002660:	42a6      	cmp	r6, r4
 8002662:	d109      	bne.n	8002678 <__libc_init_array+0x24>
 8002664:	f000 fc78 	bl	8002f58 <_init>
 8002668:	2600      	movs	r6, #0
 800266a:	4d0a      	ldr	r5, [pc, #40]	@ (8002694 <__libc_init_array+0x40>)
 800266c:	4c0a      	ldr	r4, [pc, #40]	@ (8002698 <__libc_init_array+0x44>)
 800266e:	1b64      	subs	r4, r4, r5
 8002670:	10a4      	asrs	r4, r4, #2
 8002672:	42a6      	cmp	r6, r4
 8002674:	d105      	bne.n	8002682 <__libc_init_array+0x2e>
 8002676:	bd70      	pop	{r4, r5, r6, pc}
 8002678:	f855 3b04 	ldr.w	r3, [r5], #4
 800267c:	4798      	blx	r3
 800267e:	3601      	adds	r6, #1
 8002680:	e7ee      	b.n	8002660 <__libc_init_array+0xc>
 8002682:	f855 3b04 	ldr.w	r3, [r5], #4
 8002686:	4798      	blx	r3
 8002688:	3601      	adds	r6, #1
 800268a:	e7f2      	b.n	8002672 <__libc_init_array+0x1e>
 800268c:	080032e0 	.word	0x080032e0
 8002690:	080032e0 	.word	0x080032e0
 8002694:	080032e0 	.word	0x080032e0
 8002698:	080032e4 	.word	0x080032e4

0800269c <__retarget_lock_acquire_recursive>:
 800269c:	4770      	bx	lr

0800269e <__retarget_lock_release_recursive>:
 800269e:	4770      	bx	lr

080026a0 <__ssputs_r>:
 80026a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026a4:	461f      	mov	r7, r3
 80026a6:	688e      	ldr	r6, [r1, #8]
 80026a8:	4682      	mov	sl, r0
 80026aa:	42be      	cmp	r6, r7
 80026ac:	460c      	mov	r4, r1
 80026ae:	4690      	mov	r8, r2
 80026b0:	680b      	ldr	r3, [r1, #0]
 80026b2:	d82d      	bhi.n	8002710 <__ssputs_r+0x70>
 80026b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80026b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80026bc:	d026      	beq.n	800270c <__ssputs_r+0x6c>
 80026be:	6965      	ldr	r5, [r4, #20]
 80026c0:	6909      	ldr	r1, [r1, #16]
 80026c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80026c6:	eba3 0901 	sub.w	r9, r3, r1
 80026ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80026ce:	1c7b      	adds	r3, r7, #1
 80026d0:	444b      	add	r3, r9
 80026d2:	106d      	asrs	r5, r5, #1
 80026d4:	429d      	cmp	r5, r3
 80026d6:	bf38      	it	cc
 80026d8:	461d      	movcc	r5, r3
 80026da:	0553      	lsls	r3, r2, #21
 80026dc:	d527      	bpl.n	800272e <__ssputs_r+0x8e>
 80026de:	4629      	mov	r1, r5
 80026e0:	f000 f958 	bl	8002994 <_malloc_r>
 80026e4:	4606      	mov	r6, r0
 80026e6:	b360      	cbz	r0, 8002742 <__ssputs_r+0xa2>
 80026e8:	464a      	mov	r2, r9
 80026ea:	6921      	ldr	r1, [r4, #16]
 80026ec:	f000 fbd6 	bl	8002e9c <memcpy>
 80026f0:	89a3      	ldrh	r3, [r4, #12]
 80026f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80026f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026fa:	81a3      	strh	r3, [r4, #12]
 80026fc:	6126      	str	r6, [r4, #16]
 80026fe:	444e      	add	r6, r9
 8002700:	6026      	str	r6, [r4, #0]
 8002702:	463e      	mov	r6, r7
 8002704:	6165      	str	r5, [r4, #20]
 8002706:	eba5 0509 	sub.w	r5, r5, r9
 800270a:	60a5      	str	r5, [r4, #8]
 800270c:	42be      	cmp	r6, r7
 800270e:	d900      	bls.n	8002712 <__ssputs_r+0x72>
 8002710:	463e      	mov	r6, r7
 8002712:	4632      	mov	r2, r6
 8002714:	4641      	mov	r1, r8
 8002716:	6820      	ldr	r0, [r4, #0]
 8002718:	f000 fb88 	bl	8002e2c <memmove>
 800271c:	2000      	movs	r0, #0
 800271e:	68a3      	ldr	r3, [r4, #8]
 8002720:	1b9b      	subs	r3, r3, r6
 8002722:	60a3      	str	r3, [r4, #8]
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	4433      	add	r3, r6
 8002728:	6023      	str	r3, [r4, #0]
 800272a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800272e:	462a      	mov	r2, r5
 8002730:	f000 fb4e 	bl	8002dd0 <_realloc_r>
 8002734:	4606      	mov	r6, r0
 8002736:	2800      	cmp	r0, #0
 8002738:	d1e0      	bne.n	80026fc <__ssputs_r+0x5c>
 800273a:	4650      	mov	r0, sl
 800273c:	6921      	ldr	r1, [r4, #16]
 800273e:	f000 fbbb 	bl	8002eb8 <_free_r>
 8002742:	230c      	movs	r3, #12
 8002744:	f8ca 3000 	str.w	r3, [sl]
 8002748:	89a3      	ldrh	r3, [r4, #12]
 800274a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800274e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002752:	81a3      	strh	r3, [r4, #12]
 8002754:	e7e9      	b.n	800272a <__ssputs_r+0x8a>
	...

08002758 <_svfiprintf_r>:
 8002758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800275c:	4698      	mov	r8, r3
 800275e:	898b      	ldrh	r3, [r1, #12]
 8002760:	4607      	mov	r7, r0
 8002762:	061b      	lsls	r3, r3, #24
 8002764:	460d      	mov	r5, r1
 8002766:	4614      	mov	r4, r2
 8002768:	b09d      	sub	sp, #116	@ 0x74
 800276a:	d510      	bpl.n	800278e <_svfiprintf_r+0x36>
 800276c:	690b      	ldr	r3, [r1, #16]
 800276e:	b973      	cbnz	r3, 800278e <_svfiprintf_r+0x36>
 8002770:	2140      	movs	r1, #64	@ 0x40
 8002772:	f000 f90f 	bl	8002994 <_malloc_r>
 8002776:	6028      	str	r0, [r5, #0]
 8002778:	6128      	str	r0, [r5, #16]
 800277a:	b930      	cbnz	r0, 800278a <_svfiprintf_r+0x32>
 800277c:	230c      	movs	r3, #12
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002784:	b01d      	add	sp, #116	@ 0x74
 8002786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800278a:	2340      	movs	r3, #64	@ 0x40
 800278c:	616b      	str	r3, [r5, #20]
 800278e:	2300      	movs	r3, #0
 8002790:	9309      	str	r3, [sp, #36]	@ 0x24
 8002792:	2320      	movs	r3, #32
 8002794:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002798:	2330      	movs	r3, #48	@ 0x30
 800279a:	f04f 0901 	mov.w	r9, #1
 800279e:	f8cd 800c 	str.w	r8, [sp, #12]
 80027a2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800293c <_svfiprintf_r+0x1e4>
 80027a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80027aa:	4623      	mov	r3, r4
 80027ac:	469a      	mov	sl, r3
 80027ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027b2:	b10a      	cbz	r2, 80027b8 <_svfiprintf_r+0x60>
 80027b4:	2a25      	cmp	r2, #37	@ 0x25
 80027b6:	d1f9      	bne.n	80027ac <_svfiprintf_r+0x54>
 80027b8:	ebba 0b04 	subs.w	fp, sl, r4
 80027bc:	d00b      	beq.n	80027d6 <_svfiprintf_r+0x7e>
 80027be:	465b      	mov	r3, fp
 80027c0:	4622      	mov	r2, r4
 80027c2:	4629      	mov	r1, r5
 80027c4:	4638      	mov	r0, r7
 80027c6:	f7ff ff6b 	bl	80026a0 <__ssputs_r>
 80027ca:	3001      	adds	r0, #1
 80027cc:	f000 80a7 	beq.w	800291e <_svfiprintf_r+0x1c6>
 80027d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80027d2:	445a      	add	r2, fp
 80027d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80027d6:	f89a 3000 	ldrb.w	r3, [sl]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 809f 	beq.w	800291e <_svfiprintf_r+0x1c6>
 80027e0:	2300      	movs	r3, #0
 80027e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027ea:	f10a 0a01 	add.w	sl, sl, #1
 80027ee:	9304      	str	r3, [sp, #16]
 80027f0:	9307      	str	r3, [sp, #28]
 80027f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80027f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80027f8:	4654      	mov	r4, sl
 80027fa:	2205      	movs	r2, #5
 80027fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002800:	484e      	ldr	r0, [pc, #312]	@ (800293c <_svfiprintf_r+0x1e4>)
 8002802:	f000 fb3d 	bl	8002e80 <memchr>
 8002806:	9a04      	ldr	r2, [sp, #16]
 8002808:	b9d8      	cbnz	r0, 8002842 <_svfiprintf_r+0xea>
 800280a:	06d0      	lsls	r0, r2, #27
 800280c:	bf44      	itt	mi
 800280e:	2320      	movmi	r3, #32
 8002810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002814:	0711      	lsls	r1, r2, #28
 8002816:	bf44      	itt	mi
 8002818:	232b      	movmi	r3, #43	@ 0x2b
 800281a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800281e:	f89a 3000 	ldrb.w	r3, [sl]
 8002822:	2b2a      	cmp	r3, #42	@ 0x2a
 8002824:	d015      	beq.n	8002852 <_svfiprintf_r+0xfa>
 8002826:	4654      	mov	r4, sl
 8002828:	2000      	movs	r0, #0
 800282a:	f04f 0c0a 	mov.w	ip, #10
 800282e:	9a07      	ldr	r2, [sp, #28]
 8002830:	4621      	mov	r1, r4
 8002832:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002836:	3b30      	subs	r3, #48	@ 0x30
 8002838:	2b09      	cmp	r3, #9
 800283a:	d94b      	bls.n	80028d4 <_svfiprintf_r+0x17c>
 800283c:	b1b0      	cbz	r0, 800286c <_svfiprintf_r+0x114>
 800283e:	9207      	str	r2, [sp, #28]
 8002840:	e014      	b.n	800286c <_svfiprintf_r+0x114>
 8002842:	eba0 0308 	sub.w	r3, r0, r8
 8002846:	fa09 f303 	lsl.w	r3, r9, r3
 800284a:	4313      	orrs	r3, r2
 800284c:	46a2      	mov	sl, r4
 800284e:	9304      	str	r3, [sp, #16]
 8002850:	e7d2      	b.n	80027f8 <_svfiprintf_r+0xa0>
 8002852:	9b03      	ldr	r3, [sp, #12]
 8002854:	1d19      	adds	r1, r3, #4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	9103      	str	r1, [sp, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	bfbb      	ittet	lt
 800285e:	425b      	neglt	r3, r3
 8002860:	f042 0202 	orrlt.w	r2, r2, #2
 8002864:	9307      	strge	r3, [sp, #28]
 8002866:	9307      	strlt	r3, [sp, #28]
 8002868:	bfb8      	it	lt
 800286a:	9204      	strlt	r2, [sp, #16]
 800286c:	7823      	ldrb	r3, [r4, #0]
 800286e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002870:	d10a      	bne.n	8002888 <_svfiprintf_r+0x130>
 8002872:	7863      	ldrb	r3, [r4, #1]
 8002874:	2b2a      	cmp	r3, #42	@ 0x2a
 8002876:	d132      	bne.n	80028de <_svfiprintf_r+0x186>
 8002878:	9b03      	ldr	r3, [sp, #12]
 800287a:	3402      	adds	r4, #2
 800287c:	1d1a      	adds	r2, r3, #4
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	9203      	str	r2, [sp, #12]
 8002882:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002886:	9305      	str	r3, [sp, #20]
 8002888:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002940 <_svfiprintf_r+0x1e8>
 800288c:	2203      	movs	r2, #3
 800288e:	4650      	mov	r0, sl
 8002890:	7821      	ldrb	r1, [r4, #0]
 8002892:	f000 faf5 	bl	8002e80 <memchr>
 8002896:	b138      	cbz	r0, 80028a8 <_svfiprintf_r+0x150>
 8002898:	2240      	movs	r2, #64	@ 0x40
 800289a:	9b04      	ldr	r3, [sp, #16]
 800289c:	eba0 000a 	sub.w	r0, r0, sl
 80028a0:	4082      	lsls	r2, r0
 80028a2:	4313      	orrs	r3, r2
 80028a4:	3401      	adds	r4, #1
 80028a6:	9304      	str	r3, [sp, #16]
 80028a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028ac:	2206      	movs	r2, #6
 80028ae:	4825      	ldr	r0, [pc, #148]	@ (8002944 <_svfiprintf_r+0x1ec>)
 80028b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80028b4:	f000 fae4 	bl	8002e80 <memchr>
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d036      	beq.n	800292a <_svfiprintf_r+0x1d2>
 80028bc:	4b22      	ldr	r3, [pc, #136]	@ (8002948 <_svfiprintf_r+0x1f0>)
 80028be:	bb1b      	cbnz	r3, 8002908 <_svfiprintf_r+0x1b0>
 80028c0:	9b03      	ldr	r3, [sp, #12]
 80028c2:	3307      	adds	r3, #7
 80028c4:	f023 0307 	bic.w	r3, r3, #7
 80028c8:	3308      	adds	r3, #8
 80028ca:	9303      	str	r3, [sp, #12]
 80028cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80028ce:	4433      	add	r3, r6
 80028d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80028d2:	e76a      	b.n	80027aa <_svfiprintf_r+0x52>
 80028d4:	460c      	mov	r4, r1
 80028d6:	2001      	movs	r0, #1
 80028d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80028dc:	e7a8      	b.n	8002830 <_svfiprintf_r+0xd8>
 80028de:	2300      	movs	r3, #0
 80028e0:	f04f 0c0a 	mov.w	ip, #10
 80028e4:	4619      	mov	r1, r3
 80028e6:	3401      	adds	r4, #1
 80028e8:	9305      	str	r3, [sp, #20]
 80028ea:	4620      	mov	r0, r4
 80028ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028f0:	3a30      	subs	r2, #48	@ 0x30
 80028f2:	2a09      	cmp	r2, #9
 80028f4:	d903      	bls.n	80028fe <_svfiprintf_r+0x1a6>
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0c6      	beq.n	8002888 <_svfiprintf_r+0x130>
 80028fa:	9105      	str	r1, [sp, #20]
 80028fc:	e7c4      	b.n	8002888 <_svfiprintf_r+0x130>
 80028fe:	4604      	mov	r4, r0
 8002900:	2301      	movs	r3, #1
 8002902:	fb0c 2101 	mla	r1, ip, r1, r2
 8002906:	e7f0      	b.n	80028ea <_svfiprintf_r+0x192>
 8002908:	ab03      	add	r3, sp, #12
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	462a      	mov	r2, r5
 800290e:	4638      	mov	r0, r7
 8002910:	4b0e      	ldr	r3, [pc, #56]	@ (800294c <_svfiprintf_r+0x1f4>)
 8002912:	a904      	add	r1, sp, #16
 8002914:	f3af 8000 	nop.w
 8002918:	1c42      	adds	r2, r0, #1
 800291a:	4606      	mov	r6, r0
 800291c:	d1d6      	bne.n	80028cc <_svfiprintf_r+0x174>
 800291e:	89ab      	ldrh	r3, [r5, #12]
 8002920:	065b      	lsls	r3, r3, #25
 8002922:	f53f af2d 	bmi.w	8002780 <_svfiprintf_r+0x28>
 8002926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002928:	e72c      	b.n	8002784 <_svfiprintf_r+0x2c>
 800292a:	ab03      	add	r3, sp, #12
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	462a      	mov	r2, r5
 8002930:	4638      	mov	r0, r7
 8002932:	4b06      	ldr	r3, [pc, #24]	@ (800294c <_svfiprintf_r+0x1f4>)
 8002934:	a904      	add	r1, sp, #16
 8002936:	f000 f91f 	bl	8002b78 <_printf_i>
 800293a:	e7ed      	b.n	8002918 <_svfiprintf_r+0x1c0>
 800293c:	080032ac 	.word	0x080032ac
 8002940:	080032b2 	.word	0x080032b2
 8002944:	080032b6 	.word	0x080032b6
 8002948:	00000000 	.word	0x00000000
 800294c:	080026a1 	.word	0x080026a1

08002950 <sbrk_aligned>:
 8002950:	b570      	push	{r4, r5, r6, lr}
 8002952:	4e0f      	ldr	r6, [pc, #60]	@ (8002990 <sbrk_aligned+0x40>)
 8002954:	460c      	mov	r4, r1
 8002956:	6831      	ldr	r1, [r6, #0]
 8002958:	4605      	mov	r5, r0
 800295a:	b911      	cbnz	r1, 8002962 <sbrk_aligned+0x12>
 800295c:	f000 fa80 	bl	8002e60 <_sbrk_r>
 8002960:	6030      	str	r0, [r6, #0]
 8002962:	4621      	mov	r1, r4
 8002964:	4628      	mov	r0, r5
 8002966:	f000 fa7b 	bl	8002e60 <_sbrk_r>
 800296a:	1c43      	adds	r3, r0, #1
 800296c:	d103      	bne.n	8002976 <sbrk_aligned+0x26>
 800296e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002972:	4620      	mov	r0, r4
 8002974:	bd70      	pop	{r4, r5, r6, pc}
 8002976:	1cc4      	adds	r4, r0, #3
 8002978:	f024 0403 	bic.w	r4, r4, #3
 800297c:	42a0      	cmp	r0, r4
 800297e:	d0f8      	beq.n	8002972 <sbrk_aligned+0x22>
 8002980:	1a21      	subs	r1, r4, r0
 8002982:	4628      	mov	r0, r5
 8002984:	f000 fa6c 	bl	8002e60 <_sbrk_r>
 8002988:	3001      	adds	r0, #1
 800298a:	d1f2      	bne.n	8002972 <sbrk_aligned+0x22>
 800298c:	e7ef      	b.n	800296e <sbrk_aligned+0x1e>
 800298e:	bf00      	nop
 8002990:	200001f0 	.word	0x200001f0

08002994 <_malloc_r>:
 8002994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002998:	1ccd      	adds	r5, r1, #3
 800299a:	f025 0503 	bic.w	r5, r5, #3
 800299e:	3508      	adds	r5, #8
 80029a0:	2d0c      	cmp	r5, #12
 80029a2:	bf38      	it	cc
 80029a4:	250c      	movcc	r5, #12
 80029a6:	2d00      	cmp	r5, #0
 80029a8:	4606      	mov	r6, r0
 80029aa:	db01      	blt.n	80029b0 <_malloc_r+0x1c>
 80029ac:	42a9      	cmp	r1, r5
 80029ae:	d904      	bls.n	80029ba <_malloc_r+0x26>
 80029b0:	230c      	movs	r3, #12
 80029b2:	6033      	str	r3, [r6, #0]
 80029b4:	2000      	movs	r0, #0
 80029b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a90 <_malloc_r+0xfc>
 80029be:	f000 f9fb 	bl	8002db8 <__malloc_lock>
 80029c2:	f8d8 3000 	ldr.w	r3, [r8]
 80029c6:	461c      	mov	r4, r3
 80029c8:	bb44      	cbnz	r4, 8002a1c <_malloc_r+0x88>
 80029ca:	4629      	mov	r1, r5
 80029cc:	4630      	mov	r0, r6
 80029ce:	f7ff ffbf 	bl	8002950 <sbrk_aligned>
 80029d2:	1c43      	adds	r3, r0, #1
 80029d4:	4604      	mov	r4, r0
 80029d6:	d158      	bne.n	8002a8a <_malloc_r+0xf6>
 80029d8:	f8d8 4000 	ldr.w	r4, [r8]
 80029dc:	4627      	mov	r7, r4
 80029de:	2f00      	cmp	r7, #0
 80029e0:	d143      	bne.n	8002a6a <_malloc_r+0xd6>
 80029e2:	2c00      	cmp	r4, #0
 80029e4:	d04b      	beq.n	8002a7e <_malloc_r+0xea>
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	4639      	mov	r1, r7
 80029ea:	4630      	mov	r0, r6
 80029ec:	eb04 0903 	add.w	r9, r4, r3
 80029f0:	f000 fa36 	bl	8002e60 <_sbrk_r>
 80029f4:	4581      	cmp	r9, r0
 80029f6:	d142      	bne.n	8002a7e <_malloc_r+0xea>
 80029f8:	6821      	ldr	r1, [r4, #0]
 80029fa:	4630      	mov	r0, r6
 80029fc:	1a6d      	subs	r5, r5, r1
 80029fe:	4629      	mov	r1, r5
 8002a00:	f7ff ffa6 	bl	8002950 <sbrk_aligned>
 8002a04:	3001      	adds	r0, #1
 8002a06:	d03a      	beq.n	8002a7e <_malloc_r+0xea>
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	442b      	add	r3, r5
 8002a0c:	6023      	str	r3, [r4, #0]
 8002a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	bb62      	cbnz	r2, 8002a70 <_malloc_r+0xdc>
 8002a16:	f8c8 7000 	str.w	r7, [r8]
 8002a1a:	e00f      	b.n	8002a3c <_malloc_r+0xa8>
 8002a1c:	6822      	ldr	r2, [r4, #0]
 8002a1e:	1b52      	subs	r2, r2, r5
 8002a20:	d420      	bmi.n	8002a64 <_malloc_r+0xd0>
 8002a22:	2a0b      	cmp	r2, #11
 8002a24:	d917      	bls.n	8002a56 <_malloc_r+0xc2>
 8002a26:	1961      	adds	r1, r4, r5
 8002a28:	42a3      	cmp	r3, r4
 8002a2a:	6025      	str	r5, [r4, #0]
 8002a2c:	bf18      	it	ne
 8002a2e:	6059      	strne	r1, [r3, #4]
 8002a30:	6863      	ldr	r3, [r4, #4]
 8002a32:	bf08      	it	eq
 8002a34:	f8c8 1000 	streq.w	r1, [r8]
 8002a38:	5162      	str	r2, [r4, r5]
 8002a3a:	604b      	str	r3, [r1, #4]
 8002a3c:	4630      	mov	r0, r6
 8002a3e:	f000 f9c1 	bl	8002dc4 <__malloc_unlock>
 8002a42:	f104 000b 	add.w	r0, r4, #11
 8002a46:	1d23      	adds	r3, r4, #4
 8002a48:	f020 0007 	bic.w	r0, r0, #7
 8002a4c:	1ac2      	subs	r2, r0, r3
 8002a4e:	bf1c      	itt	ne
 8002a50:	1a1b      	subne	r3, r3, r0
 8002a52:	50a3      	strne	r3, [r4, r2]
 8002a54:	e7af      	b.n	80029b6 <_malloc_r+0x22>
 8002a56:	6862      	ldr	r2, [r4, #4]
 8002a58:	42a3      	cmp	r3, r4
 8002a5a:	bf0c      	ite	eq
 8002a5c:	f8c8 2000 	streq.w	r2, [r8]
 8002a60:	605a      	strne	r2, [r3, #4]
 8002a62:	e7eb      	b.n	8002a3c <_malloc_r+0xa8>
 8002a64:	4623      	mov	r3, r4
 8002a66:	6864      	ldr	r4, [r4, #4]
 8002a68:	e7ae      	b.n	80029c8 <_malloc_r+0x34>
 8002a6a:	463c      	mov	r4, r7
 8002a6c:	687f      	ldr	r7, [r7, #4]
 8002a6e:	e7b6      	b.n	80029de <_malloc_r+0x4a>
 8002a70:	461a      	mov	r2, r3
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	42a3      	cmp	r3, r4
 8002a76:	d1fb      	bne.n	8002a70 <_malloc_r+0xdc>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	6053      	str	r3, [r2, #4]
 8002a7c:	e7de      	b.n	8002a3c <_malloc_r+0xa8>
 8002a7e:	230c      	movs	r3, #12
 8002a80:	4630      	mov	r0, r6
 8002a82:	6033      	str	r3, [r6, #0]
 8002a84:	f000 f99e 	bl	8002dc4 <__malloc_unlock>
 8002a88:	e794      	b.n	80029b4 <_malloc_r+0x20>
 8002a8a:	6005      	str	r5, [r0, #0]
 8002a8c:	e7d6      	b.n	8002a3c <_malloc_r+0xa8>
 8002a8e:	bf00      	nop
 8002a90:	200001f4 	.word	0x200001f4

08002a94 <_printf_common>:
 8002a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a98:	4616      	mov	r6, r2
 8002a9a:	4698      	mov	r8, r3
 8002a9c:	688a      	ldr	r2, [r1, #8]
 8002a9e:	690b      	ldr	r3, [r1, #16]
 8002aa0:	4607      	mov	r7, r0
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	bfb8      	it	lt
 8002aa6:	4613      	movlt	r3, r2
 8002aa8:	6033      	str	r3, [r6, #0]
 8002aaa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002aae:	460c      	mov	r4, r1
 8002ab0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ab4:	b10a      	cbz	r2, 8002aba <_printf_common+0x26>
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	6033      	str	r3, [r6, #0]
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	0699      	lsls	r1, r3, #26
 8002abe:	bf42      	ittt	mi
 8002ac0:	6833      	ldrmi	r3, [r6, #0]
 8002ac2:	3302      	addmi	r3, #2
 8002ac4:	6033      	strmi	r3, [r6, #0]
 8002ac6:	6825      	ldr	r5, [r4, #0]
 8002ac8:	f015 0506 	ands.w	r5, r5, #6
 8002acc:	d106      	bne.n	8002adc <_printf_common+0x48>
 8002ace:	f104 0a19 	add.w	sl, r4, #25
 8002ad2:	68e3      	ldr	r3, [r4, #12]
 8002ad4:	6832      	ldr	r2, [r6, #0]
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	42ab      	cmp	r3, r5
 8002ada:	dc2b      	bgt.n	8002b34 <_printf_common+0xa0>
 8002adc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002ae0:	6822      	ldr	r2, [r4, #0]
 8002ae2:	3b00      	subs	r3, #0
 8002ae4:	bf18      	it	ne
 8002ae6:	2301      	movne	r3, #1
 8002ae8:	0692      	lsls	r2, r2, #26
 8002aea:	d430      	bmi.n	8002b4e <_printf_common+0xba>
 8002aec:	4641      	mov	r1, r8
 8002aee:	4638      	mov	r0, r7
 8002af0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002af4:	47c8      	blx	r9
 8002af6:	3001      	adds	r0, #1
 8002af8:	d023      	beq.n	8002b42 <_printf_common+0xae>
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	6922      	ldr	r2, [r4, #16]
 8002afe:	f003 0306 	and.w	r3, r3, #6
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	bf14      	ite	ne
 8002b06:	2500      	movne	r5, #0
 8002b08:	6833      	ldreq	r3, [r6, #0]
 8002b0a:	f04f 0600 	mov.w	r6, #0
 8002b0e:	bf08      	it	eq
 8002b10:	68e5      	ldreq	r5, [r4, #12]
 8002b12:	f104 041a 	add.w	r4, r4, #26
 8002b16:	bf08      	it	eq
 8002b18:	1aed      	subeq	r5, r5, r3
 8002b1a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002b1e:	bf08      	it	eq
 8002b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b24:	4293      	cmp	r3, r2
 8002b26:	bfc4      	itt	gt
 8002b28:	1a9b      	subgt	r3, r3, r2
 8002b2a:	18ed      	addgt	r5, r5, r3
 8002b2c:	42b5      	cmp	r5, r6
 8002b2e:	d11a      	bne.n	8002b66 <_printf_common+0xd2>
 8002b30:	2000      	movs	r0, #0
 8002b32:	e008      	b.n	8002b46 <_printf_common+0xb2>
 8002b34:	2301      	movs	r3, #1
 8002b36:	4652      	mov	r2, sl
 8002b38:	4641      	mov	r1, r8
 8002b3a:	4638      	mov	r0, r7
 8002b3c:	47c8      	blx	r9
 8002b3e:	3001      	adds	r0, #1
 8002b40:	d103      	bne.n	8002b4a <_printf_common+0xb6>
 8002b42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b4a:	3501      	adds	r5, #1
 8002b4c:	e7c1      	b.n	8002ad2 <_printf_common+0x3e>
 8002b4e:	2030      	movs	r0, #48	@ 0x30
 8002b50:	18e1      	adds	r1, r4, r3
 8002b52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002b5c:	4422      	add	r2, r4
 8002b5e:	3302      	adds	r3, #2
 8002b60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002b64:	e7c2      	b.n	8002aec <_printf_common+0x58>
 8002b66:	2301      	movs	r3, #1
 8002b68:	4622      	mov	r2, r4
 8002b6a:	4641      	mov	r1, r8
 8002b6c:	4638      	mov	r0, r7
 8002b6e:	47c8      	blx	r9
 8002b70:	3001      	adds	r0, #1
 8002b72:	d0e6      	beq.n	8002b42 <_printf_common+0xae>
 8002b74:	3601      	adds	r6, #1
 8002b76:	e7d9      	b.n	8002b2c <_printf_common+0x98>

08002b78 <_printf_i>:
 8002b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b7c:	7e0f      	ldrb	r7, [r1, #24]
 8002b7e:	4691      	mov	r9, r2
 8002b80:	2f78      	cmp	r7, #120	@ 0x78
 8002b82:	4680      	mov	r8, r0
 8002b84:	460c      	mov	r4, r1
 8002b86:	469a      	mov	sl, r3
 8002b88:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002b8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002b8e:	d807      	bhi.n	8002ba0 <_printf_i+0x28>
 8002b90:	2f62      	cmp	r7, #98	@ 0x62
 8002b92:	d80a      	bhi.n	8002baa <_printf_i+0x32>
 8002b94:	2f00      	cmp	r7, #0
 8002b96:	f000 80d3 	beq.w	8002d40 <_printf_i+0x1c8>
 8002b9a:	2f58      	cmp	r7, #88	@ 0x58
 8002b9c:	f000 80ba 	beq.w	8002d14 <_printf_i+0x19c>
 8002ba0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ba4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002ba8:	e03a      	b.n	8002c20 <_printf_i+0xa8>
 8002baa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002bae:	2b15      	cmp	r3, #21
 8002bb0:	d8f6      	bhi.n	8002ba0 <_printf_i+0x28>
 8002bb2:	a101      	add	r1, pc, #4	@ (adr r1, 8002bb8 <_printf_i+0x40>)
 8002bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002bb8:	08002c11 	.word	0x08002c11
 8002bbc:	08002c25 	.word	0x08002c25
 8002bc0:	08002ba1 	.word	0x08002ba1
 8002bc4:	08002ba1 	.word	0x08002ba1
 8002bc8:	08002ba1 	.word	0x08002ba1
 8002bcc:	08002ba1 	.word	0x08002ba1
 8002bd0:	08002c25 	.word	0x08002c25
 8002bd4:	08002ba1 	.word	0x08002ba1
 8002bd8:	08002ba1 	.word	0x08002ba1
 8002bdc:	08002ba1 	.word	0x08002ba1
 8002be0:	08002ba1 	.word	0x08002ba1
 8002be4:	08002d27 	.word	0x08002d27
 8002be8:	08002c4f 	.word	0x08002c4f
 8002bec:	08002ce1 	.word	0x08002ce1
 8002bf0:	08002ba1 	.word	0x08002ba1
 8002bf4:	08002ba1 	.word	0x08002ba1
 8002bf8:	08002d49 	.word	0x08002d49
 8002bfc:	08002ba1 	.word	0x08002ba1
 8002c00:	08002c4f 	.word	0x08002c4f
 8002c04:	08002ba1 	.word	0x08002ba1
 8002c08:	08002ba1 	.word	0x08002ba1
 8002c0c:	08002ce9 	.word	0x08002ce9
 8002c10:	6833      	ldr	r3, [r6, #0]
 8002c12:	1d1a      	adds	r2, r3, #4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6032      	str	r2, [r6, #0]
 8002c18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002c20:	2301      	movs	r3, #1
 8002c22:	e09e      	b.n	8002d62 <_printf_i+0x1ea>
 8002c24:	6833      	ldr	r3, [r6, #0]
 8002c26:	6820      	ldr	r0, [r4, #0]
 8002c28:	1d19      	adds	r1, r3, #4
 8002c2a:	6031      	str	r1, [r6, #0]
 8002c2c:	0606      	lsls	r6, r0, #24
 8002c2e:	d501      	bpl.n	8002c34 <_printf_i+0xbc>
 8002c30:	681d      	ldr	r5, [r3, #0]
 8002c32:	e003      	b.n	8002c3c <_printf_i+0xc4>
 8002c34:	0645      	lsls	r5, r0, #25
 8002c36:	d5fb      	bpl.n	8002c30 <_printf_i+0xb8>
 8002c38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002c3c:	2d00      	cmp	r5, #0
 8002c3e:	da03      	bge.n	8002c48 <_printf_i+0xd0>
 8002c40:	232d      	movs	r3, #45	@ 0x2d
 8002c42:	426d      	negs	r5, r5
 8002c44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c48:	230a      	movs	r3, #10
 8002c4a:	4859      	ldr	r0, [pc, #356]	@ (8002db0 <_printf_i+0x238>)
 8002c4c:	e011      	b.n	8002c72 <_printf_i+0xfa>
 8002c4e:	6821      	ldr	r1, [r4, #0]
 8002c50:	6833      	ldr	r3, [r6, #0]
 8002c52:	0608      	lsls	r0, r1, #24
 8002c54:	f853 5b04 	ldr.w	r5, [r3], #4
 8002c58:	d402      	bmi.n	8002c60 <_printf_i+0xe8>
 8002c5a:	0649      	lsls	r1, r1, #25
 8002c5c:	bf48      	it	mi
 8002c5e:	b2ad      	uxthmi	r5, r5
 8002c60:	2f6f      	cmp	r7, #111	@ 0x6f
 8002c62:	6033      	str	r3, [r6, #0]
 8002c64:	bf14      	ite	ne
 8002c66:	230a      	movne	r3, #10
 8002c68:	2308      	moveq	r3, #8
 8002c6a:	4851      	ldr	r0, [pc, #324]	@ (8002db0 <_printf_i+0x238>)
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002c72:	6866      	ldr	r6, [r4, #4]
 8002c74:	2e00      	cmp	r6, #0
 8002c76:	bfa8      	it	ge
 8002c78:	6821      	ldrge	r1, [r4, #0]
 8002c7a:	60a6      	str	r6, [r4, #8]
 8002c7c:	bfa4      	itt	ge
 8002c7e:	f021 0104 	bicge.w	r1, r1, #4
 8002c82:	6021      	strge	r1, [r4, #0]
 8002c84:	b90d      	cbnz	r5, 8002c8a <_printf_i+0x112>
 8002c86:	2e00      	cmp	r6, #0
 8002c88:	d04b      	beq.n	8002d22 <_printf_i+0x1aa>
 8002c8a:	4616      	mov	r6, r2
 8002c8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c90:	fb03 5711 	mls	r7, r3, r1, r5
 8002c94:	5dc7      	ldrb	r7, [r0, r7]
 8002c96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c9a:	462f      	mov	r7, r5
 8002c9c:	42bb      	cmp	r3, r7
 8002c9e:	460d      	mov	r5, r1
 8002ca0:	d9f4      	bls.n	8002c8c <_printf_i+0x114>
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d10b      	bne.n	8002cbe <_printf_i+0x146>
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	07df      	lsls	r7, r3, #31
 8002caa:	d508      	bpl.n	8002cbe <_printf_i+0x146>
 8002cac:	6923      	ldr	r3, [r4, #16]
 8002cae:	6861      	ldr	r1, [r4, #4]
 8002cb0:	4299      	cmp	r1, r3
 8002cb2:	bfde      	ittt	le
 8002cb4:	2330      	movle	r3, #48	@ 0x30
 8002cb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002cba:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002cbe:	1b92      	subs	r2, r2, r6
 8002cc0:	6122      	str	r2, [r4, #16]
 8002cc2:	464b      	mov	r3, r9
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	4640      	mov	r0, r8
 8002cc8:	f8cd a000 	str.w	sl, [sp]
 8002ccc:	aa03      	add	r2, sp, #12
 8002cce:	f7ff fee1 	bl	8002a94 <_printf_common>
 8002cd2:	3001      	adds	r0, #1
 8002cd4:	d14a      	bne.n	8002d6c <_printf_i+0x1f4>
 8002cd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002cda:	b004      	add	sp, #16
 8002cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	f043 0320 	orr.w	r3, r3, #32
 8002ce6:	6023      	str	r3, [r4, #0]
 8002ce8:	2778      	movs	r7, #120	@ 0x78
 8002cea:	4832      	ldr	r0, [pc, #200]	@ (8002db4 <_printf_i+0x23c>)
 8002cec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	6831      	ldr	r1, [r6, #0]
 8002cf4:	061f      	lsls	r7, r3, #24
 8002cf6:	f851 5b04 	ldr.w	r5, [r1], #4
 8002cfa:	d402      	bmi.n	8002d02 <_printf_i+0x18a>
 8002cfc:	065f      	lsls	r7, r3, #25
 8002cfe:	bf48      	it	mi
 8002d00:	b2ad      	uxthmi	r5, r5
 8002d02:	6031      	str	r1, [r6, #0]
 8002d04:	07d9      	lsls	r1, r3, #31
 8002d06:	bf44      	itt	mi
 8002d08:	f043 0320 	orrmi.w	r3, r3, #32
 8002d0c:	6023      	strmi	r3, [r4, #0]
 8002d0e:	b11d      	cbz	r5, 8002d18 <_printf_i+0x1a0>
 8002d10:	2310      	movs	r3, #16
 8002d12:	e7ab      	b.n	8002c6c <_printf_i+0xf4>
 8002d14:	4826      	ldr	r0, [pc, #152]	@ (8002db0 <_printf_i+0x238>)
 8002d16:	e7e9      	b.n	8002cec <_printf_i+0x174>
 8002d18:	6823      	ldr	r3, [r4, #0]
 8002d1a:	f023 0320 	bic.w	r3, r3, #32
 8002d1e:	6023      	str	r3, [r4, #0]
 8002d20:	e7f6      	b.n	8002d10 <_printf_i+0x198>
 8002d22:	4616      	mov	r6, r2
 8002d24:	e7bd      	b.n	8002ca2 <_printf_i+0x12a>
 8002d26:	6833      	ldr	r3, [r6, #0]
 8002d28:	6825      	ldr	r5, [r4, #0]
 8002d2a:	1d18      	adds	r0, r3, #4
 8002d2c:	6961      	ldr	r1, [r4, #20]
 8002d2e:	6030      	str	r0, [r6, #0]
 8002d30:	062e      	lsls	r6, r5, #24
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	d501      	bpl.n	8002d3a <_printf_i+0x1c2>
 8002d36:	6019      	str	r1, [r3, #0]
 8002d38:	e002      	b.n	8002d40 <_printf_i+0x1c8>
 8002d3a:	0668      	lsls	r0, r5, #25
 8002d3c:	d5fb      	bpl.n	8002d36 <_printf_i+0x1be>
 8002d3e:	8019      	strh	r1, [r3, #0]
 8002d40:	2300      	movs	r3, #0
 8002d42:	4616      	mov	r6, r2
 8002d44:	6123      	str	r3, [r4, #16]
 8002d46:	e7bc      	b.n	8002cc2 <_printf_i+0x14a>
 8002d48:	6833      	ldr	r3, [r6, #0]
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	1d1a      	adds	r2, r3, #4
 8002d4e:	6032      	str	r2, [r6, #0]
 8002d50:	681e      	ldr	r6, [r3, #0]
 8002d52:	6862      	ldr	r2, [r4, #4]
 8002d54:	4630      	mov	r0, r6
 8002d56:	f000 f893 	bl	8002e80 <memchr>
 8002d5a:	b108      	cbz	r0, 8002d60 <_printf_i+0x1e8>
 8002d5c:	1b80      	subs	r0, r0, r6
 8002d5e:	6060      	str	r0, [r4, #4]
 8002d60:	6863      	ldr	r3, [r4, #4]
 8002d62:	6123      	str	r3, [r4, #16]
 8002d64:	2300      	movs	r3, #0
 8002d66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d6a:	e7aa      	b.n	8002cc2 <_printf_i+0x14a>
 8002d6c:	4632      	mov	r2, r6
 8002d6e:	4649      	mov	r1, r9
 8002d70:	4640      	mov	r0, r8
 8002d72:	6923      	ldr	r3, [r4, #16]
 8002d74:	47d0      	blx	sl
 8002d76:	3001      	adds	r0, #1
 8002d78:	d0ad      	beq.n	8002cd6 <_printf_i+0x15e>
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	079b      	lsls	r3, r3, #30
 8002d7e:	d413      	bmi.n	8002da8 <_printf_i+0x230>
 8002d80:	68e0      	ldr	r0, [r4, #12]
 8002d82:	9b03      	ldr	r3, [sp, #12]
 8002d84:	4298      	cmp	r0, r3
 8002d86:	bfb8      	it	lt
 8002d88:	4618      	movlt	r0, r3
 8002d8a:	e7a6      	b.n	8002cda <_printf_i+0x162>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	4632      	mov	r2, r6
 8002d90:	4649      	mov	r1, r9
 8002d92:	4640      	mov	r0, r8
 8002d94:	47d0      	blx	sl
 8002d96:	3001      	adds	r0, #1
 8002d98:	d09d      	beq.n	8002cd6 <_printf_i+0x15e>
 8002d9a:	3501      	adds	r5, #1
 8002d9c:	68e3      	ldr	r3, [r4, #12]
 8002d9e:	9903      	ldr	r1, [sp, #12]
 8002da0:	1a5b      	subs	r3, r3, r1
 8002da2:	42ab      	cmp	r3, r5
 8002da4:	dcf2      	bgt.n	8002d8c <_printf_i+0x214>
 8002da6:	e7eb      	b.n	8002d80 <_printf_i+0x208>
 8002da8:	2500      	movs	r5, #0
 8002daa:	f104 0619 	add.w	r6, r4, #25
 8002dae:	e7f5      	b.n	8002d9c <_printf_i+0x224>
 8002db0:	080032bd 	.word	0x080032bd
 8002db4:	080032ce 	.word	0x080032ce

08002db8 <__malloc_lock>:
 8002db8:	4801      	ldr	r0, [pc, #4]	@ (8002dc0 <__malloc_lock+0x8>)
 8002dba:	f7ff bc6f 	b.w	800269c <__retarget_lock_acquire_recursive>
 8002dbe:	bf00      	nop
 8002dc0:	200001ec 	.word	0x200001ec

08002dc4 <__malloc_unlock>:
 8002dc4:	4801      	ldr	r0, [pc, #4]	@ (8002dcc <__malloc_unlock+0x8>)
 8002dc6:	f7ff bc6a 	b.w	800269e <__retarget_lock_release_recursive>
 8002dca:	bf00      	nop
 8002dcc:	200001ec 	.word	0x200001ec

08002dd0 <_realloc_r>:
 8002dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dd4:	4680      	mov	r8, r0
 8002dd6:	4615      	mov	r5, r2
 8002dd8:	460c      	mov	r4, r1
 8002dda:	b921      	cbnz	r1, 8002de6 <_realloc_r+0x16>
 8002ddc:	4611      	mov	r1, r2
 8002dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002de2:	f7ff bdd7 	b.w	8002994 <_malloc_r>
 8002de6:	b92a      	cbnz	r2, 8002df4 <_realloc_r+0x24>
 8002de8:	f000 f866 	bl	8002eb8 <_free_r>
 8002dec:	2400      	movs	r4, #0
 8002dee:	4620      	mov	r0, r4
 8002df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002df4:	f000 f8a8 	bl	8002f48 <_malloc_usable_size_r>
 8002df8:	4285      	cmp	r5, r0
 8002dfa:	4606      	mov	r6, r0
 8002dfc:	d802      	bhi.n	8002e04 <_realloc_r+0x34>
 8002dfe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002e02:	d8f4      	bhi.n	8002dee <_realloc_r+0x1e>
 8002e04:	4629      	mov	r1, r5
 8002e06:	4640      	mov	r0, r8
 8002e08:	f7ff fdc4 	bl	8002994 <_malloc_r>
 8002e0c:	4607      	mov	r7, r0
 8002e0e:	2800      	cmp	r0, #0
 8002e10:	d0ec      	beq.n	8002dec <_realloc_r+0x1c>
 8002e12:	42b5      	cmp	r5, r6
 8002e14:	462a      	mov	r2, r5
 8002e16:	4621      	mov	r1, r4
 8002e18:	bf28      	it	cs
 8002e1a:	4632      	movcs	r2, r6
 8002e1c:	f000 f83e 	bl	8002e9c <memcpy>
 8002e20:	4621      	mov	r1, r4
 8002e22:	4640      	mov	r0, r8
 8002e24:	f000 f848 	bl	8002eb8 <_free_r>
 8002e28:	463c      	mov	r4, r7
 8002e2a:	e7e0      	b.n	8002dee <_realloc_r+0x1e>

08002e2c <memmove>:
 8002e2c:	4288      	cmp	r0, r1
 8002e2e:	b510      	push	{r4, lr}
 8002e30:	eb01 0402 	add.w	r4, r1, r2
 8002e34:	d902      	bls.n	8002e3c <memmove+0x10>
 8002e36:	4284      	cmp	r4, r0
 8002e38:	4623      	mov	r3, r4
 8002e3a:	d807      	bhi.n	8002e4c <memmove+0x20>
 8002e3c:	1e43      	subs	r3, r0, #1
 8002e3e:	42a1      	cmp	r1, r4
 8002e40:	d008      	beq.n	8002e54 <memmove+0x28>
 8002e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002e4a:	e7f8      	b.n	8002e3e <memmove+0x12>
 8002e4c:	4601      	mov	r1, r0
 8002e4e:	4402      	add	r2, r0
 8002e50:	428a      	cmp	r2, r1
 8002e52:	d100      	bne.n	8002e56 <memmove+0x2a>
 8002e54:	bd10      	pop	{r4, pc}
 8002e56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002e5e:	e7f7      	b.n	8002e50 <memmove+0x24>

08002e60 <_sbrk_r>:
 8002e60:	b538      	push	{r3, r4, r5, lr}
 8002e62:	2300      	movs	r3, #0
 8002e64:	4d05      	ldr	r5, [pc, #20]	@ (8002e7c <_sbrk_r+0x1c>)
 8002e66:	4604      	mov	r4, r0
 8002e68:	4608      	mov	r0, r1
 8002e6a:	602b      	str	r3, [r5, #0]
 8002e6c:	f7ff fb58 	bl	8002520 <_sbrk>
 8002e70:	1c43      	adds	r3, r0, #1
 8002e72:	d102      	bne.n	8002e7a <_sbrk_r+0x1a>
 8002e74:	682b      	ldr	r3, [r5, #0]
 8002e76:	b103      	cbz	r3, 8002e7a <_sbrk_r+0x1a>
 8002e78:	6023      	str	r3, [r4, #0]
 8002e7a:	bd38      	pop	{r3, r4, r5, pc}
 8002e7c:	200001f8 	.word	0x200001f8

08002e80 <memchr>:
 8002e80:	4603      	mov	r3, r0
 8002e82:	b510      	push	{r4, lr}
 8002e84:	b2c9      	uxtb	r1, r1
 8002e86:	4402      	add	r2, r0
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	d101      	bne.n	8002e92 <memchr+0x12>
 8002e8e:	2000      	movs	r0, #0
 8002e90:	e003      	b.n	8002e9a <memchr+0x1a>
 8002e92:	7804      	ldrb	r4, [r0, #0]
 8002e94:	3301      	adds	r3, #1
 8002e96:	428c      	cmp	r4, r1
 8002e98:	d1f6      	bne.n	8002e88 <memchr+0x8>
 8002e9a:	bd10      	pop	{r4, pc}

08002e9c <memcpy>:
 8002e9c:	440a      	add	r2, r1
 8002e9e:	4291      	cmp	r1, r2
 8002ea0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8002ea4:	d100      	bne.n	8002ea8 <memcpy+0xc>
 8002ea6:	4770      	bx	lr
 8002ea8:	b510      	push	{r4, lr}
 8002eaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002eae:	4291      	cmp	r1, r2
 8002eb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002eb4:	d1f9      	bne.n	8002eaa <memcpy+0xe>
 8002eb6:	bd10      	pop	{r4, pc}

08002eb8 <_free_r>:
 8002eb8:	b538      	push	{r3, r4, r5, lr}
 8002eba:	4605      	mov	r5, r0
 8002ebc:	2900      	cmp	r1, #0
 8002ebe:	d040      	beq.n	8002f42 <_free_r+0x8a>
 8002ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ec4:	1f0c      	subs	r4, r1, #4
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bfb8      	it	lt
 8002eca:	18e4      	addlt	r4, r4, r3
 8002ecc:	f7ff ff74 	bl	8002db8 <__malloc_lock>
 8002ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f44 <_free_r+0x8c>)
 8002ed2:	6813      	ldr	r3, [r2, #0]
 8002ed4:	b933      	cbnz	r3, 8002ee4 <_free_r+0x2c>
 8002ed6:	6063      	str	r3, [r4, #4]
 8002ed8:	6014      	str	r4, [r2, #0]
 8002eda:	4628      	mov	r0, r5
 8002edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ee0:	f7ff bf70 	b.w	8002dc4 <__malloc_unlock>
 8002ee4:	42a3      	cmp	r3, r4
 8002ee6:	d908      	bls.n	8002efa <_free_r+0x42>
 8002ee8:	6820      	ldr	r0, [r4, #0]
 8002eea:	1821      	adds	r1, r4, r0
 8002eec:	428b      	cmp	r3, r1
 8002eee:	bf01      	itttt	eq
 8002ef0:	6819      	ldreq	r1, [r3, #0]
 8002ef2:	685b      	ldreq	r3, [r3, #4]
 8002ef4:	1809      	addeq	r1, r1, r0
 8002ef6:	6021      	streq	r1, [r4, #0]
 8002ef8:	e7ed      	b.n	8002ed6 <_free_r+0x1e>
 8002efa:	461a      	mov	r2, r3
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	b10b      	cbz	r3, 8002f04 <_free_r+0x4c>
 8002f00:	42a3      	cmp	r3, r4
 8002f02:	d9fa      	bls.n	8002efa <_free_r+0x42>
 8002f04:	6811      	ldr	r1, [r2, #0]
 8002f06:	1850      	adds	r0, r2, r1
 8002f08:	42a0      	cmp	r0, r4
 8002f0a:	d10b      	bne.n	8002f24 <_free_r+0x6c>
 8002f0c:	6820      	ldr	r0, [r4, #0]
 8002f0e:	4401      	add	r1, r0
 8002f10:	1850      	adds	r0, r2, r1
 8002f12:	4283      	cmp	r3, r0
 8002f14:	6011      	str	r1, [r2, #0]
 8002f16:	d1e0      	bne.n	8002eda <_free_r+0x22>
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4408      	add	r0, r1
 8002f1e:	6010      	str	r0, [r2, #0]
 8002f20:	6053      	str	r3, [r2, #4]
 8002f22:	e7da      	b.n	8002eda <_free_r+0x22>
 8002f24:	d902      	bls.n	8002f2c <_free_r+0x74>
 8002f26:	230c      	movs	r3, #12
 8002f28:	602b      	str	r3, [r5, #0]
 8002f2a:	e7d6      	b.n	8002eda <_free_r+0x22>
 8002f2c:	6820      	ldr	r0, [r4, #0]
 8002f2e:	1821      	adds	r1, r4, r0
 8002f30:	428b      	cmp	r3, r1
 8002f32:	bf01      	itttt	eq
 8002f34:	6819      	ldreq	r1, [r3, #0]
 8002f36:	685b      	ldreq	r3, [r3, #4]
 8002f38:	1809      	addeq	r1, r1, r0
 8002f3a:	6021      	streq	r1, [r4, #0]
 8002f3c:	6063      	str	r3, [r4, #4]
 8002f3e:	6054      	str	r4, [r2, #4]
 8002f40:	e7cb      	b.n	8002eda <_free_r+0x22>
 8002f42:	bd38      	pop	{r3, r4, r5, pc}
 8002f44:	200001f4 	.word	0x200001f4

08002f48 <_malloc_usable_size_r>:
 8002f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f4c:	1f18      	subs	r0, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	bfbc      	itt	lt
 8002f52:	580b      	ldrlt	r3, [r1, r0]
 8002f54:	18c0      	addlt	r0, r0, r3
 8002f56:	4770      	bx	lr

08002f58 <_init>:
 8002f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5a:	bf00      	nop
 8002f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5e:	bc08      	pop	{r3}
 8002f60:	469e      	mov	lr, r3
 8002f62:	4770      	bx	lr

08002f64 <_fini>:
 8002f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f66:	bf00      	nop
 8002f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f6a:	bc08      	pop	{r3}
 8002f6c:	469e      	mov	lr, r3
 8002f6e:	4770      	bx	lr
